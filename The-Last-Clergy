//더 라스트 클러지

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>
#include <conio.h>
#include "cful.h"


#define Map_X_MAX 156//가로 최대  진짜최대 156 78
#define Map_Y_MAX 40//세로 최대
#define up 0
#define down 1
#define left 2
#define right 3
#define select 4
#define skill_1 5
#define skill_2 6
#define skill_3 7
#define skill_4 8
#define information 9
#define level_up 10
//색변환
#define gray 7
#define blue 9
#define green 10
#define sky_blue 11
#define red 12
#define purple 13
#define yellow 14
#define white 15
//xy좌표
#define quest_x 130
#define quest_y 21
#define name_x 70
#define name_y 27
//이름
#define narration "          "
#define unknown "???"
#define Baal  0 



int keyControl();//키보드 컨트롤
void mainMenu();//게임 타이틀 출력
int MenuDraw();//게임 선택화면 출력
void SelectMenu(int x, int y);//시작버튼 위치
void SetConsole();//기본 건드리지 말것
void textcolor(int color_number);//색정하기
void madeBy();//만드사람 소개
int finishMenu();//끝내기 메뉴
void script_tool();//대사 틀
void monster_status();//몬스터 능력치
void ch_status();//등장인물 능력치

void EP_tutorial();//튜토리얼

int drawing_tool_total(int enemy, int enemy_boss, int enemy_1);//그림 그리기 통합
int drawing_tool(int painting[40][156], int y, int x, int print_x, int print_y, int maxx, int maxy);//그림그리기
int drawing_tool_side(int painting[40][156], int y, int x, int print_x, int print_y, int maxx, int maxy);//잡몹 그리기
int drawing_tool_boss(int painting[40][156], int y, int x, int print_x, int print_y, int maxx, int maxy);//보스 그리기
int drawing_tool_result(int painting[40][156], int y, int x, int print_x, int print_y, int maxx, int maxy);//승리/패배 모션 그리기
char narration_background_history(char script[40][156]);//나레이션 출력
char script_play_hero(char name[100], char script[10][130], int line);//실질적인 대화내용 출력
char script_play_you(char name[100], char script[10][130], int line);//실질적인 대화내용 출력 상대방
char play_battle_system(char hero, int enemy, int enemy_boss, int enemy_1);//배틀시스템
char play_battle_tutorial(int hero, int enemy, int enemy_boss, int enemy_1);//배틀시프템 퓨토리얼
char play_battle_boss(char hero, int boss_status);//보스전
char play_battle_enemy(int enemy, int enemy_boss, int enemy_1, int enemy_hp, int enemy_boss_hp, int enemy_1_hp);//적턴 경우의 수
int damage_system(int depense, int attact, int critical, int critical_damage, int decrease_damage);//피격자defense 공격자attact 공격자크확 공격자크뎀 피격자피감
int level_up_system();//레벨업 시스템
int main_screen(void);//메인 스크린

int Dungeon_system(void);//던전 선택
int dungeon_icon(int x, int y);//던전 아이콘 선택
int dungeon_iconpage_1(void);//1 ~ 50 Lv
int dungeon_iconpage_2(void);//51 ~ 100 Lv
int Evolution_system(void);//진화 시스템


long long int level_need[201] = {
 0//0
 ,15//1
 ,34
 ,57
 ,92
 ,135
 ,372
 ,560
 ,840
 ,1242
 ,1716//10

 ,2360
 ,3216
 ,4200
 ,5460
 ,7050
 ,8840
 ,11040
 ,13716
 ,16680
 ,20216//20

 ,24402
 ,28980
 ,34320
 ,40512
 ,47216
 ,54900
 ,63666
 ,73080
 ,83720
 ,95700//30

 ,108480
 ,122760
 ,138666
 ,155540
 ,174216
 ,194832
 ,216600
 ,240500
 ,266682
 ,294216//40

 ,324240
 ,356916
 ,391160
 ,428280
 ,468450
 ,510420
 ,555680
 ,604416
 ,655200
 ,709716//50

 ,748607
 ,789631
 ,832902
 ,878545
 ,926689
 ,977471
 ,1031036
 ,1087536
 ,1147132
 ,1209994//60

 ,1276301
 ,1346242
 ,1420016
 ,1497832
 ,1579913
 ,1669492
 ,1757815
 ,1854143
 ,1955750
 ,2062925
 ,2175972
 ,2295216
 ,2410992
 ,2552663
 ,2693603
 ,2841212
 ,2996910
 ,3161140
 ,3334370
 ,3517093
 ,3709829
 ,3913127
 ,4127566
 ,4353756
 ,4592341
 ,4844001
 ,5109452
 ,5389449
 ,5684790
 ,5996316
 ,6324914
 ,6671519
 ,7037119
 ,7422752
 ,7829518
 ,8258575
 ,8711144
 ,9188514
 ,9692044
 ,10223168
 ,10783397
 ,11374327
 ,11997640
 ,12655110
 ,13348610
 ,14080113
 ,14851703
 ,15665576
 ,16524049
 ,17629566
 ,18384706
 ,19392187
 ,20454878
 ,21575805
 ,22758159
 ,24005306
 ,25320796
 ,26708375
 ,28171993
 ,29715818
 ,31344244
 ,33061908
 ,34873800
 ,36784778
 ,38800583
 ,40926854
 ,43169645
 ,45535341
 ,48030677
 ,50662758
 ,53439077
 ,56367538
 ,59456479
 ,62714694
 ,66151459
 ,69776558
 ,73600313
 ,77633610
 ,81887931
 ,86375389
 ,91108760
 ,96101520
 ,101367883
 ,106922842
 ,112782212
 ,118962678
 ,125481832
 ,132358236
 ,139611467
 ,147262175
 ,155332142
 ,163844343
 ,172823012
 ,182293713
 ,192283408
 ,202820538
 ,213935103
 ,225658746
 ,238024845
 ,251068606
 ,264827165
 ,289339693
 ,294647508
 ,310794191
 ,327825712
 ,345790561
 ,364729883
 ,384727628
 ,405810702
 ,428049128
 ,451506220
 ,476248760
 ,502347192
 ,529875818
 ,558913012
 ,589541445
 ,621848316
 ,655925603
 ,691870326
 ,729784819
 ,769777027
 ,811960808
 ,856456260
 ,903390063
 ,952895838
 ,1005114529
 ,1060194805
 ,1118293480
 ,1179575962
 ,1244216724
 ,1312399800
 ,1384319309
 ,1460180007
 ,1540197871
 ,1624600714
 ,1713628833
 ,1807535693
 ,1906588648
 ,2011069705
 ,2121276324
};

int a = 0;
int fail_or_victory = -1;

char script_story[10][156] = {
{"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"},
{"20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"},
{"20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"},
{"20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"},
{"20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"},
{"20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"},
{"20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"},
{"20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"},
{"20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"},
{"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
};
char background_story[40][156] = {
	{"태초에"},
	{"세계에는 빛과 어둠만이 존재 했다"},
	{"대부분의 빛은 모여서 하늘과 땅이 되었고,"},
	{"일부의 빛은 세상을 풍요롭게 하는 동식물이 되었다"},
	{"대부분의 어둠은 마계를 만들었고"},
	{"일부의 어둠은 악마가 되었다"},
	{"남은 극소수의 빛과 일부의 어둠은 모여 인간이 되었다"},
	{"악마을은 거칠고 척박한 마계보다 기름지고 비옥한 땅이 많은"},
	{"인계를 차지하기 위해 지속적으로 침공 한다"},
	{"인간들은 판게아 곳곳에 퍼져있는 빛의 힘을 사용해"},
	{"악마들을 저지했다"},
	{"빛의 힘은 악마들에게 치명젹이어서 악마를 대등하게 상대 할 수 있었다"},
	{"어느순간 부터 악마들은 침공차지 않았다"},
	{"인간들은 승리와 100년간의 평화를 만끽하는 인류사 최대의 실수를 한다"},
	{"악마의 침공이 끝난 114년 후,"},
	{"힘을기른 악마을 인계를 다시한번 침공했고,"},
	{"100여년의 평화에 찌든 인간들은 악마들을 막기엔 역부족 이었다"},
	{"가장 강성했던 바하무트왕국이 멸망하고"},
	{"이것을 기점으로 판게아의 왕국들은 차레차레 멸망한다"}
};
char EP_tutorial_1[8][156] = {
	{"어쩌다 이렇게 된건가..."},
	{"매일아침 빵을 구워주던 메리아줌마. 나의 무기를 수선해주던 베이글좋아하는 아저씨"},
	{"모두 죽었다..."},
	{"모두... 저 빌어먹을것들 때문이다"},
	{"저놈들을 전부 쓸어버리겠다"},
	{"으아아아아!!!!!"},
	{"아 라 르미라!"}
};
char EP_tutorial_2[6][156] = {
	{"헉...헉....헉"},
	{"끝도 없이 밀려 오는군..."},
	{"?"},
	("어디서 이런기운이?"),
	{"설마......!"},
	{"이건 상급악마?!"},
};
char EP_tutorial_3[7][156] = {
	{"오..."},
	{"절 알아보는 인간이 있었다니"},
	{"인간따위에게 정체를 들키는 날이 올줄이야"},
	{"그래도"},
	{"당신은 그럴자격이 있지"},
	{"인간치고는 내가본 인간중에 가장 강하군"},
	{"어디 100년만에 한번 놀아볼까?"}
};
char EP_tutorial_4[5][156] = {
	{"..........."},
	{"떨린다...."},
	{"이렇게나 커다란 마(魔)력이라니"},
	{"내가 가지고 있는 신성력과는 비교도 할 수 없어....."},
	{".........."}
};
char EP_tutorial_5[2][156] = {
	{"적의 힘과 자신의 힘을 비교하다가 전의를 잃어버리다니"},
	{"고작 그정도였나...."}
};
char EP_tutorial_6[3][156] = {
	{"!"},
	{"내가 누구인가..."},
	{"냐는 대 바하무트왕국의 성기사 단장이다!!!"}
};
char EP_tutorial_7[2][156] = {
	{"그래"},
	{"그래야지 놀맛이..."},
};
char EP_tutorial_8[3][156] = {
	{"\"그순간\""},
	{"\'카앙!!!!\'"},
	{"\"미카엘의 기습으로 전투가 시작돠었다\""}
};
char EP_tutorial_9[7][156] = {
	{"그래도 쓸만은 하구나"},
	{"그정도의 신성력은 100년만이야"},
	{"단순히 성기사단장이 이런 신성력이라니..."},
	{"어디 교황이란놈은 어떤가 한번볼까?"},
	{"나 4대악마, 바알의 이름으로 명한다"},
	{"어디.."},
	{"교황이란놈의 피맛좀 보자꾸나"}
};
char EP_tutorial_narration[40][156] = {
	{"멸망후"},
	{"어느 깊은 숲속 오두막"}
};

char EP_1_1[3][156] = {
	{"헉헉"},
	{"할아버지 힘들어요"},
	{"할아버지 정말 교황님 맞으세요?"}
};
char EP_1_2[2][156] = {
	{"그럼 당연하지"},
	{"내가 이 대륙 하나밖에 없는 교황이지"}
};
char EP_1_3[2][156] = {
	{"그럼 왜 저같은거 한테 시간을 할애하십니까?"},
	{"언릉가서 왕국에 눌려 앉은 저 빌어먹을 것들이나 쓸어 버리시지.."}
};

int shieldicon[11][11] = {
	{6,6,0,6,6,0,6,6,0,6,6},
	{6,0,6,0,0,4,0,0,6,0,6},
	{0,4,0,2,6,4,6,2,6,4,0},
	{0,6,2,4,1,3,1,4,2,6,0},
	{0,5,5,5,4,3,4,5,5,5,0},
	{0,5,6,2,2,3,2,2,6,5,0},
	{6,0,4,4,6,0,6,4,4,0,6},
	{6,6,0,4,0,6,0,4,0,6,6},
	{6,6,0,4,4,0,4,4,0,6,6},
	{6,6,6,0,4,0,4,0,6,6,6},
	{6,6,6,6,0,0,0,6,6,6,6}
};
int swordicon[11][11] = {
	{6,6,6,6,6,7,6,6,6,6,6},
	{6,6,6,6,7,6,7,6,6,6,6 },
	{6,6,6,6,7,24,7,6,6,6,6},
	{6,6,6,7,7,24,7,7,6,6,6},
	{6,6,6,7,6,7,6,7,6,6,6},
	{6,6,7,6,7,24,7,6,7,6,6},
	{6,6,7,0,6,7,6,0,7,6,6},
	{6,6,6,7,6,0,6,7,6,6,6},
	{6,6,6,7,6,0,6,7,6,6,6},
	{6,6,6,7,6,0,6,7,6,6,6},
	{6,6,6,6,0,7,0,6,6,6,6}
};
int fire[11][11] = {
	{6,6,6,6,25,6,6,6,6,25,6},
	{6,6,6,6,6,6,6,25,6,6,6},
	{25,6,6,25,6,6,25,6,6,6,25},
	{6,25,6,25,25,25,15,25,6,25,6},
	{25,6,25,15,25,15,7,15,25,15,25},
	{6,25,15,7,15,7,7,7,15,25,25},
	{6,25,15,15,7,7,7,15,15,25,6},
	{6,25,25,15,15,7,15,15,25,25,6},
	{6,6,25,25,15,15,15,25,25,6,6},
	{6,6,6,25,25,25,25,25,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6}
};
int salvation[11][11] = {
{6,6,6,0,0,0,0,0,6,6,6},
{6,6,0,6,6,6,6,6,0,6,6},
{6,0,6,6,6,7,6,6,6,0,6},
{0,6,6,8,6,7,6,8,6,6,0},
{0,6,6,6,7,0,7,6,6,6,0},
{0,6,7,7,0,0,0,7,7,6,0},
{0,6,6,6,7,0,7,6,6,6,0},
{0,6,6,8,6,7,6,8,6,6,0},
{6,0,6,6,6,7,6,6,6,0,6},
{6,6,0,6,6,6,6,6,0,6,6},
{6,6,6,0,0,0,0,0,6,6,6} };
int monster_die[15][20] = {
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6}
};
int lowdevil[15][20] = {
{6,6,6,6,6,6,26,6,6,6,6,6,6,26,6,6,6,6,6,6},
{6,6,6,6,6,6,26,26,6,6,6,6,26,26,6,6,6,6,6,6},
{6,6,6,6,6,6,6,26,27,27,27,27,26,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,27,27,27,27,27,27,27,6,6,6,6,6,6},
{6,6,6,6,6,6,27,27,0,6,27,0,6,27,6,6,6,6,6,6},
{6,6,6,6,6,6,27,27,6,0,27,6,0,27,6,6,6,6,6,6},
{6,6,6,6,6,6,6,27,27,27,27,27,27,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,27,27,27,27,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,27,27,27,27,27,27,6,6,6,6,6,6,6},
{6,6,6,6,6,6,27,27,27,27,27,27,27,27,6,6,6,6,6,6,},
{6,6,6,6,6,27,27,27,27,27,27,27,27,27,27,6,6,6,6,6},
{6,6,6,6,27,27,27,27,27,27,27,27,27,27,27,27,6,6,6,6},
{6,6,6,6,27,6,27,27,27,27,27,27,27,27,6,27,6,6,6,6},
{6,6,6,6,6,6,27,27,27,6,6,27,27,27,6,6,6,6,6,6},
{6,6,6,6,6,6,6,27,6,6,6,6,27,6,6,6,6,6,6,6}
};
int victory[40][156] = {
{ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,6,6,6,6,6,6,6,6,6,6,6,6,7,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,7,7,7,6,6,6,6,6,6,7,7,7,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,6,6,6,6,6,6,6,6,7,7,7,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,7,7,6,6,6,6,6,6,7,7,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,6,6,6,6,6,6,6,6,6,7,7,6,7,7,7,7,6,6,6,6,7,7,7,7,6,6,6,6,7,7,7,7,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,7,7,7,6,6,6,6,7,7,7,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,7,7,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,6,6,6,6,7,7,7,7,6,6,7,7,7,7,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,7,7,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,7,7,6,6,6,6,6,7,7,7,6,6,6,6,6,6,7,7,7,6,6,6,6,7,7,6,6,6,6,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,7,7,7,6,6,7,7,7,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,7,7,7,6,6,6,6,7,7,6,6,6,6,6,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,7,7,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,7,7,7,6,6,6,6,7,7,6,6,6,6,6,6,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,7,7,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,7,7,7,6,6,6,6,7,7,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,7,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,7,7,6,7,7,7,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,7,7,7,6,6,6,6,6,6,7,7,7,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,7,7,7,6,6,6,6,6,7,7,7,6,6,6,6,6,6,7,7,6,6,7,7,7,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,7,7,6,6,6,7,7,7,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,7,7,7,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,7,7,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 },
{ 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 }
};
int level_up_tool[20][80] = {
	{1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
	{1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1},
};
int hero[15][20] = {
{6,28,6,6,6,29,6,28,6,28,6,29,6,6,6},
{6,28,6,6,6,29,28,28,28,28,28,29,6,6,6},
{6,28,6,6,6,29,29,29,29,29,29,29,6,6,6},
{6,28,6,6,6,29,29,29,29,29,29,29,6,6,6},
{6,28,6,6,6,29,30,6,6,6,30,29,30,28,6},
{6,28,6,6,30,29,29,28,6,28,29,30,28,29,6},
{29,29,29,30,29,30,29,29,6,29,30,28,29,29,6},
{30,30,30,30,29,30,30,30,30,30,6,29,29,29,6},
{6,29,6,6,6,30,29,28,28,29,30,29,28,29},
{6,29,6,6,6,6,29,29,29,29,30,29,30,29,6},
{6,6,6,6,6,6,30,30,30,30,6,29,29,29,6},
{6,6,6,6,6,6,29,29,29,29,30,29,29,6,6},
{6,6,6,6,6,6,29,6,6,6,30,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6}
};
int slime[15][20] = {
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,31,31,31,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,31,6,31,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,6,31,31,6,6,6,6,6},
{6,6,6,6,6,6,6,6,31,31,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,31,31,31,31,31,31,6,31,31,31,6,6,6,6,6,6},
{6,6,6,31,31,31,31,31,31,31,31,31,31,31,31,6,6,6,6,6},
{6,6,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,6},
{6,6,31,31,31,0,6,31,31,6,0,31,31,31,31,31,31,6,6,6},
{6,6,31,31,31,6,0,31,31,0,6,31,31,31,31,31,31,6,6,6},
{6,6,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,6},
{6,6,6,31,31,31,6,31,6,31,6,31,31,31,31,31,31,6,6,6},
{6,6,6,6,31,31,31,6,31,6,31,31,31,31,31,31,6,6,6,6},
{6,6,6,6,6,31,31,31,31,31,31,31,31,31,31,6,6,6,6,6},
{6,6,6,6,6,6,31,31,31,31,31,31,31,6,6,6,6,6,6,6}
};
int kingslime[20][40] = {
{6,6,6,6,6,6,6,6,6,25,25,25,7,7,7,6,6,6,25,6,6,6,25,6,6,6,6,7,25,25,25,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,6,7,7,7,6,7,7,7,6,6,7,7,7,7,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,25,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,33,33,33,33,33,33,7,7,6,6,6,32,32,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,32,32,32,32,32,32,7,7,7,33,33,33,33,33,32,32,32,32,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,32,32,32,32,32,32,32,32,32,32,32,7,7,6,6,6,33,33,32,33,32,32,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,32,32,32,32,32,32,32,32,32,32,32,32,32,6,6,6,6,32,32,33,32,32,32,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,6,6,6,6,32,32,32,32,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,6,6,6,6,6,32,32,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,32,32,32,0,6,32,32,32,0,6,32,32,32,32,32,32,32,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,32,32,32,6,0,32,32,32,6,0,32,32,32,32,32,32,32,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,32,32,32,32,32,32,6,32,32,32,32,32,32,32,32,32,32,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,32,32,32,6,32,6,32,6,32,6,32,32,32,32,32,32,32,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,32,32,32,32,6,32,32,32,6,32,32,32,32,32,32,32,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,32,32,32,32,32,32,32,32,32,32,32,32,32,32,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,32,32,32,32,32,32,32,32,32,32,32,32,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,6,32,32,32,32,32,32,32,32,32,32,32,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,32,32,32,32,32,32,32,32,32,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6}
};
int mainhero[30][40] = {
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,34,34,34,34,34,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,34,34,34,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,34,34,34,6,6,6,25,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,35,7,7,7,7,7,7,7,34,34,7,7,34,34,34,6,6,25,25,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,34,35,7,7,7,7,7,7,7,34,34,7,7,34,25,34,25,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,34,7,35,7,7,7,7,7,7,7,34,34,7,7,25,34,25,25,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,7,7,7,35,7,7,7,7,7,7,7,34,7,7,25,25,25,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,7,7,7,7,7,35,6,6,6,6,6,6,6,6,6,35,25,35,25,25,25,25,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,7,7,7,34,7,7,35,7,34,7,7,34,7,7,7,25,7,25,34,6,6,6,34,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,7,7,6,6,34,7,7,35,34,37,34,37,34,7,7,34,25,34,34,34,34,34,34,34,34,34,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,7,7,0,2,36,7,7,34,35,34,6,6,6,7,7,34,34,34,34,34,34,34,6,6,6,6,34,34,6,6,6,6,6,6},
{6,6,6,6,6,7,7,34,0,2,36,34,7,34,36,35,35,35,6,7,7,34,7,7,34,7,7,34,34,6,6,7,6,34,6,6,6,6,6,6},
{6,6,6,6,6,7,34,34,36,2,36,36,34,36,36,35,35,35,6,7,34,34,34,7,7,7,7,7,34,34,34,6,6,34,6,6,6,6,6,6},
{6,6,6,6,6,7,34,34,6,36,36,36,34,36,36,35,35,35,7,34,34,34,34,6,7,7,7,34,7,7,7,34,34,34,34,6,6,6,6,6},
{6,6,6,6,7,34,34,34,6,36,36,36,36,6,6,0,6,6,7,34,34,34,34,34,6,7,7,7,7,7,6,34,34,34,34,6,6,6,6,6},
{6,6,6,6,7,34,34,34,34,6,6,0,0,6,6,25,0,0,7,34,34,34,34,34,34,6,6,7,7,7,6,6,34,34,6,6,6,6,6,6},
{6,6,6,6,7,34,34,34,34,34,6,2,2,0,0,2,0,25,7,34,34,34,34,34,34,34,34,34,6,6,7,7,6,34,34,6,6,6,6,6},
{6,6,6,6,7,34,6,6,34,6,0,36,0,0,36,36,2,0,2,6,34,34,34,0,0,34,34,34,34,6,7,34,34,6,6,6,6,6,6,6},
{6,6,6,6,6,7,6,6,6,6,6,36,0,36,0,0,6,6,0,2,0,0,34,34,34,0,34,34,34,34,6,34,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,36,36,6,6,6,0,0,0,25,6,6,34,6,0,6,34,6,6,6,34,6,6,6,34,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,2,0,36,36,36,0,6,6,2,6,34,6,34,6,34,6,6,6,6,6,6,6,6,6,6,37,6,6,6},
{6,6,6,6,6,6,6,6,6,0,36,36,0,36,36,36,0,0,6,34,34,34,34,34,34,0,6,6,6,6,6,6,6,6,37,37,6,6,6},
{6,6,6,6,6,6,6,6,6,25,25,6,6,0,0,0,0,25,0,6,34,25,37,6,6,6,6,6,6,6,6,6,6,37,37,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,25,6,6,0,25,6,25,36,6,6,34,37,37,25,25,25,6,6,6,6,25,37,37,37,37,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,36,36,6,6,6,25,37,37,37,25,25,25,37,37,37,37,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,25,25,36,6,6,25,0,25,25,37,37,37,37,37,25,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,25,6,6,6,6,6,6,25,25,25,25,25,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6}
};
int scarecrow[15][20] = {
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,41,41,41,41,41,41,6,6,6,6,6,6,6},
{6,6,6,6,38,38,39,41,6,6,6,6,41,39,38,39,6,6,6,6},
{6,6,6,6,6,6,6,6,6,39,39,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,39,39,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
{6,41,41,6,6,6,6,6,6,40,40,6,6,6,6,6,6,41,41,6},
{6,6,6,6,41,41,41,41,40,40,40,40,41,41,41,6,6,6,6,6},
{6,6,6,6,6,6,41,41,40,40,40,41,41,41,6,6,6,6,6,6},
{6,6,6,6,6,6,41,41,40,40,41,41,41,41,6,6,6,6,6,6},
{6,6,6,6,6,41,41,41,40,41,41,41,41,6,6,6,6,6,6,6},
{6,6,6,6,6,41,41,41,41,41,41,41,41,41,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,41,41,41,41,41,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,41,41,6,6,6,6,6,6,6,6,6},
{6,6,6,6,6,6,6,6,6,41,41,6,6,6,6,6,6,6,6,6}
};

int hp = 100;
int hp_max = 100;
int hop = 100;
int hop_max = 100;
int attack = 300;
int attack_max = 300;
int defense = 5;
int critical = 15;
int critical_damage = 2;//2배
int decrease_damage = 1;

int level = 1;
int level_max = 200;
int exp_have = 0;//
long long int exp_max = 40834779237;//40,834,779,237

int evolve = 0;//max = 5

struct ch {
	char* name;
	int hp;
	int hp_max;
	int hop;
	int hop_max;
	int attack;
	int defense;
	int critical;
	int critical_damage;
	int decrese_damage;
};
struct monster {
	char* name;
	int hp;
	int hp_max;
	int attack;
	int defense;
	int decrese_damage;
};

struct ch ch[10];
struct monster ms[10];

void ch_status()
{
	ch[0].name = "[기사단장]미하일";//[기사단장]미하일 능력치
	ch[0].hp = 670000;
	ch[0].hp_max = 670000;
	ch[0].hop = 280;
	ch[0].hop_max = 280;
	ch[0].attack = 42300;
	ch[0].defense = 1300;
	ch[0].critical = 15;
	ch[0].critical_damage = 2;
	ch[0].decrese_damage = 1;

	ch[1].name = "[교황]인파우스";//[교황]인파우스 능력치
	ch[1].hp = 67000;
	ch[1].hp_max = 67000;
	ch[1].hop = 280;
	ch[1].hop_max = 280;
	ch[1].attack = 4230;
	ch[1].defense = 40000;
	ch[1].critical = 60;
	ch[1].critical_damage = 2;
	ch[1].decrese_damage = 1;
}
void monster_status()
{
	ms[0].name = "Baal";//바알 능력치
	ms[0].hp = 10000000;
	ms[0].hp_max = 10000000;
	ms[0].attack = 450000;
	ms[0].defense = 3000;
	ms[0].decrese_damage = 1;

	ms[1].name = "Devil Load";//악마 귀족 능력치
	ms[1].hp = 1200000;
	ms[1].hp_max = 1200000;
	ms[1].attack = 30000;
	ms[1].defense = 1500;
	ms[1].decrese_damage = 1;

	ms[2].name = "Devil";//하급 악마 능력치
	ms[2].hp = 200000;
	ms[2].hp_max = 200000;
	ms[2].attack = 12000;
	ms[2].defense = 300;
	ms[2].decrese_damage = 1;

	ms[3].name = "Idad";//허수아비 능력치
	ms[3].hp = 1000;
	ms[3].hp_max = 1000;
	ms[3].attack = 0;
	ms[3].defense = 10;
	ms[3].decrese_damage = 1;

	ms[4].name = "Slime";//슬라임 능력치
	ms[4].hp = 3000;
	ms[4].hp_max = 500;
	ms[4].attack = 15;
	ms[4].defense = 5;
	ms[4].decrese_damage = 1;

	ms[5].name = "King Slime";//킹 슬라임 능력치
	ms[5].hp = 80000;
	ms[5].hp_max = 80000;
	ms[5].attack = 800;
	ms[5].defense = 10;
	ms[5].decrese_damage = 1;

	ms[6].name = "Gobline";//고블린 능력치
	ms[6].hp = 80000;
	ms[6].hp_max = 80000;
	ms[6].attack = 1200;
	ms[6].defense = 300;
	ms[6].decrese_damage = 1;

	ms[7].name = "Magic Gobline";//고블린 능력치
	ms[7].hp = 80000;
	ms[7].hp_max = 80000;
	ms[7].attack = 2000;
	ms[7].defense = 1000;
	ms[7].decrese_damage = 1;


};

int main(void)
{
	SetConsole();
	ch_status();
	monster_status();
	srand(time(NULL));
	printf("전체 화면으로 만들어 주세요\n");
	for (int i = 5; i > 0; i--)
	{
		printf("%d\n", i);
		Sleep(1000);
	}
	system("cls");
	int keycode;
	while (1)
	{
		mainMenu();
		keycode = MenuDraw();
		if (keycode == 6)
		{
			system("cls");
			int finish = finishMenu();
			if (finish == 0)
				return 0;
			else if (finish == 7)
				continue;
		}
		else if (keycode == 3)
		{
			madeBy();
		}
		else if (keycode == 0)
			break;
	}
	//게임 시직
	EP_tutorial();
	main_screen();
};

void EP_tutorial()
{
	/*narration_background_history(background_story); *///배경설명
	system("cls");
	SelectMenu(69, 20);
	printf("EP.tutorial");
	Sleep(1000);
	system("cls");
	SelectMenu(63, 20);
	printf("아렌델이 멸망하기 10분전");
	Sleep(1000);
	system("cls");
	script_tool();
	char name[100] = { "[성기사단장]미하일" };
	/*script_play_hero(name, EP_tutorial_1, 8); */
	system("cls");
	play_battle_tutorial(0, 2, 1, 2);
	/*system("cls");
	script_tool();
	script_play_hero(name, EP_tutorial_2, 6);
	Sleep(1000);
	script_play_you(unknown, EP_tutorial_3, 7);
	Sleep(1000);
	script_play_hero(name, EP_tutorial_4, 5);
	Sleep(1000);
	script_play_you(unknown, EP_tutorial_5, 2);
	Sleep(1000);
	script_play_hero(name, EP_tutorial_6, 3);
	Sleep(1000);
	script_play_you(unknown, EP_tutorial_7, 2);
	Sleep(10);
	script_play_hero(narration, EP_tutorial_8, 3);*/
	system("cls");
	play_battle_boss(0, 0);
	/*system("cls");
	script_tool();
	script_play_you(0, EP_tutorial_9, 7);*/
	system("cls");
	narration_background_history(EP_tutorial_narration);
};


int main_screen()
{
	system("cls");
	int x = 75;
	int y = 26;
	int sum;

	while (1)
	{
		SelectMenu(73, 5);
		printf("던전");
		SelectMenu(73, 35);
		printf("스토리");
		SelectMenu(1, 21);
		printf("능력치 강화");
		SelectMenu(140, 21);
		printf("진화의 방");
		SelectMenu(x, y);
		printf("  ");
		SelectMenu(x, y);
		printf("♥");

		sum = keyControl();
		switch (sum)
		{
		case left:
		{
			SelectMenu(x, y);
			printf("  ");
			if (y < 10 && x < 52 || y > 30 && x < 55)
			{
				break;
			}
			if (x > 0)
			{
				x -= 5;
			}
			break;
		}

		case right:
		{
			SelectMenu(x, y);
			printf("  ");
			if (y < 10 && x > 104 || y > 30 && x > 95)
			{
				break;
			}
			if (x < 155)
			{
				x += 5;
			}
			break;
		}

		case up:
		{
			SelectMenu(x, y);
			printf("  ");
			if (y <= 10 && x > 52 && x < 104 && y > 0)
			{
				y -= 2;
			}
			else if (y > 10)
			{
				y -= 2;
			}
			break;
		}

		case down:
		{
			SelectMenu(x, y);
			printf("  ");
			if (y >= 30 && x > 52 && x < 104 && y < 40)
			{
				y += 2;
			}
			else if (y < 30)
			{
				y += 2;
			}
			break;
		}
		case select:
		{
			if (x == 0 && y == 22)
				level_up_system();
			else if (x == 75 && y == 6)
				Dungeon_system();
			else if (x == 155 && y == 22 && level == 20)
				Evolution_system();
			else
				break;
			break;
		}
		}
	}
};
int level_up_system()
{
	int status_point = 0;
	int x = 35;
	int y = 14;
	int i = 1;
	system("cls");//┏━━━━━━┓ ┃ ┗━━━━━━┛
	SelectMenu(0, 10);
	printf("     ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┃                                                                                                                                                 ┃\n");
	printf("     ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
	SelectMenu(24, 14);
	printf("Str %d", attack);
	SelectMenu(24, 18);
	printf("Defense %d", defense);
	SelectMenu(24, 22);
	textcolor(red);
	printf("Hp %d", hp);
	SelectMenu(24, 26);
	textcolor(yellow);
	printf("Hop %d", hop);
	SelectMenu(75, 20);
	textcolor(green);
	printf("exp %d ", exp_have);
	printf("/ %d", level_need[level]);
	SelectMenu(65, 5);
	printf("level %d", level);
	textcolor(sky_blue);
	SelectMenu(100, 14);
	printf("status point %d", status_point);
	textcolor(white);

	SelectMenu(x, y);
	printf("+");
	int n = 0;
	while (1)
	{
		n = keyControl();
		switch (n)
		{
		case up:
		{
			if (y != 14)
			{
				SelectMenu(x, y);
				printf(" ");
				SelectMenu(x, y -= 4);
				printf("+");
			}
			break;
		}
		case down:
		{
			if (y != 26)
			{
				SelectMenu(x, y);
				printf(" ");
				SelectMenu(x, y += 4);
				printf("+");
			}
			break;
		}
		case level_up:
		{
			if (exp_have >= level_need[level])
			{
				exp_have -= level_need[level];
				level += 1;
				SelectMenu(75, 20);
				textcolor(green);
				printf("exp %d ", exp_have);
				printf("/ %d", level_need[level]);
				SelectMenu(65, 5);
				printf("level %d", level);
				if (level % 10 == 0)
					status_point += 10;
				else
					status_point += 3;
				textcolor(sky_blue);
				SelectMenu(100, 14);
				printf("status point %d", status_point);
				textcolor(white);
			}
			break;
		}
		case skill_4:
		{
			system("cls");
			return 0;
		}

		case select:
		{
			if (status_point > 0)
			{
				if (y == 14)
				{
					status_point -= 1;
					attack += 300;
					SelectMenu(24, 14);
					printf("Str %d", attack);
					textcolor(sky_blue);
					SelectMenu(110, 14);
					printf("             ");
					SelectMenu(100, 14);
					printf("status point %d", status_point);
					textcolor(white);
				}
				else if (y == 18)
				{
					status_point -= 1;
					defense += 10;
					SelectMenu(24, 18);
					printf("Defense %d", defense);
					textcolor(sky_blue);
					SelectMenu(100, 14);
					printf("status point %d", status_point);
					textcolor(white);
				}
				else if (y == 22)
				{
					status_point -= 1;
					hp += 500;
					hp_max += 500;
					SelectMenu(24, 22);
					textcolor(red);
					printf("Hp %d", hp);
					textcolor(sky_blue);
					SelectMenu(100, 14);
					printf("status point %d", status_point);
					textcolor(white);
				}
				else if (y == 26)
				{
					status_point -= 1;
					hop += 10;
					hp_max += 10;
					SelectMenu(24, 26);
					textcolor(yellow);
					printf("Hop %d", hop);
					textcolor(sky_blue);
					SelectMenu(100, 14);
					printf("status point %d", status_point);
					textcolor(white);
				}
			}
			break;
		}
		}
	}
};
int Dungeon_system()
{
	int x = 50;
	int y = 15;
	int count = 0;
	int n;
	int page = 1;
	int result = 0;
	dungeon_iconpage_1();
	while (1)
	{
		if (result == 1)
		{
			system("cls");
			dungeon_iconpage_1();
			result = 0;
		}
		n = keyControl();
		switch (n)
		{
		case left:
		{
			if (x == 50)
			{
				dungeon_iconpage_1();
				x = 50;
				y = 15;
				page = 1;
				break;
			}
			else if (y == 15)
			{
				SelectMenu(x, y);
				printf(" ");
				SelectMenu(x -= 35, y += 20);
				printf("＜");
			}
			else if (y == 35)
			{
				SelectMenu(x, y);
				printf(" ");
				SelectMenu(x -= 35, y -= 20);
				printf("＜");
			}
			break;
		}

		case right:
		{
			if (x == 155)
			{
				dungeon_iconpage_2();
				x = 50;
				y = 15;
				page = 2;
				break;
			}
			else if (y == 15)
			{
				SelectMenu(x, y);
				printf(" ");
				SelectMenu(x += 35, y += 20);
				printf("<");
			}
			else if (y == 35)
			{
				SelectMenu(x, y);
				printf(" ");
				SelectMenu(x += 35, y -= 20);
				printf("<");
			}
			break;
		}

		case skill_4:
		{
			system("cls");
			return 0;
		}
		case select:
		{
			if (page == 1)
			{
				if (x == 50 && y == 15 && level >= 1)
				{
					play_battle_system("미하일", 3, 3, 3);//허수 아비
					if (fail_or_victory == 1)
						exp_have += 3000;
					fail_or_victory = -1;
					result = 1;
				}
				else if (x == 85 && y == 35 && level >= 11)
				{
					play_battle_system("미하일", 4, 5, 4);//슬라임
					if (fail_or_victory == 1)
						exp_have += 20216;
					fail_or_victory = -1;
					result = 1;
				}
				else if (x == 110 && y == 15 && level >= 21)//고블린
				{
					play_battle_system("미하일", 6, 6, 6);
					if (fail_or_victory == 1)
						exp_have += 294216;
					fail_or_victory = -1;
					result = 1;
				}
				else if (x == 145 && y == 35 && level >= 41)//고블린
				{
					play_battle_system("미하일", 6, 6, 6);
					if (fail_or_victory == 1)
						exp_have += 709716;
					fail_or_victory = -1;
					result = 1;
				}
			}
		}
		}
	}
};
int dungeon_icon(int x, int y)
{
	SelectMenu(x, y++);
	printf("┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");//
	SelectMenu(x, y++);
	printf("┃                                               ┃\n");
	SelectMenu(x, y++);
	printf("┃                                               ┃\n");
	SelectMenu(x, y++);
	printf("┃                                               ┃\n");
	SelectMenu(x, y++);
	printf("┃                                               ┃\n");
	SelectMenu(x, y++);
	printf("┃                                               ┃\n");
	SelectMenu(x, y++);
	printf("┃                                               ┃\n");
	SelectMenu(x, y++);
	printf("┃                                               ┃\n");
	SelectMenu(x, y++);
	printf("┃                                               ┃\n");
	SelectMenu(x, y++);
	printf("┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
};
int dungeon_iconpage_1()
{
	int x = 50;
	int y = 15;
	system("cls");//┏━━━━━━┓ ┃ ┗━━━━━━┛
	dungeon_icon(0, 10);
	dungeon_icon(35, 30);
	dungeon_icon(70, 10);
	dungeon_icon(105, 30);

	SelectMenu(x, y);
	printf("＜");

	SelectMenu(20, 13);
	printf("1 ~ 10");
	SelectMenu(16, 16);
	printf("뒷마당 수련장");

	SelectMenu(55, 33);
	printf("11 ~ 20");
	SelectMenu(52, 36);
	printf("슬라임 둥지");

	SelectMenu(90, 13);
	printf("21 ~ 40");
	SelectMenu(89, 16);
	printf("고블린 토벌");

	SelectMenu(125, 33);
	printf("41 ~ 50");
	SelectMenu(123, 36);
	printf("골렘의 사원");
};
int dungeon_iconpage_2()
{
	int x = 50;
	int y = 15;
	system("cls");//┏━━━━━━┓ ┃ ┗━━━━━━┛
	dungeon_icon(0, 10);
	dungeon_icon(35, 30);
	dungeon_icon(70, 10);
	dungeon_icon(105, 30);

	SelectMenu(x, y);
	printf("＜");

	SelectMenu(20, 13);
	printf("51 ~ 60");
	SelectMenu(12, 16);
	printf("요염된 엘프의 숲");//요정, 오염된 엘프 전사, 요정왕

	SelectMenu(55, 33);
	printf("61 ~ 70");
	SelectMenu(48, 36);
	printf("정복된 바하무트의 신전");//하급, 중급, 로드
	//마계
	SelectMenu(90, 13);
	printf("71 ~ 90");
	SelectMenu(89, 16);
	printf("드래곤의 무덤");//드래곤 해츨링, 드래곤의 영, 본 드래곤

	SelectMenu(125, 33);
	printf("91 ~ 100");
	SelectMenu(123, 36);
	printf("마계의 중심부");//상위 악마
};
int Evolution_system()
{
	system("cls");

};

char narration_background_history(char script[40][156])
{
	system("cls");
	int count;
	int x;
	int y = 5;
	for (int i = 0; i < 40; i++)
	{
		if (script[i][0] == NULL)
			continue;
		count = 0;
		for (int k = 0; k < 156; k++)
		{
			if (script[i][k] == NULL)
				break;
			count++;
		}
		if (count % 2 == 1)
			count++;
		x = 75 - (count / 2);
		SelectMenu(x, ++y);
		for (int j = 0; j < 100; j++)
		{
			if (script[i][j] == NULL)
				break;
			printf("%c", script[i][j]);
			Sleep(30);
		}
		Sleep(1000);
	}
	textcolor(14);
	SelectMenu(122, 40);
	printf(">  NEXT");
	textcolor(15);
	while (1)
	{
		int num = keyControl();
		if (num == 4)
			return 0;
	}
}
int keyControl()
{
	char temp = _getch();

	if (temp == 'w' || temp == 'W')
		return up;//0
	else if (temp == 'a' || temp == 'A')
		return left;//1
	else if (temp == 's' || temp == 'S')
		return down;//2
	else if (temp == 'd' || temp == 'D')
		return right;//3
	else if (temp == ' ')
		return select;//4

	//게임 스킬
	else if (temp == 'q' || temp == 'Q')
		return skill_1;//5
	//w는 위에 있으니 패스  0
	else if (temp == 'e' || temp == 'E')
		return skill_3;//7
	else if (temp == 'r' || temp == 'R')
		return skill_4;//8

	//게임스킬 정보
	else if (temp == 'f' || temp == 'F')
		return information;//9
	else if (temp == 'g' || temp == "G")
		return level_up;
}
int finishMenu()
{
	int x = 64;
	int y = 29;
	SelectMenu(58, 20);
	printf("정말로 종료 하시겠습니까?");
	SelectMenu(x, y);
	printf("> 예      아니요");
	int temp = keyControl();
	while (1)
	{
		int n = keyControl();
		switch (n)
		{
		case left:
		{
			if (x > 64)
			{
				SelectMenu(x, y);
				printf(" ");
				SelectMenu(x -= 7, y);
				printf(">");
			}
			break;
		}

		case right:
		{
			if (x < 71)
			{
				SelectMenu(x, y);
				printf(" ");
				SelectMenu(x += 7, y);
				printf(">");
			}
			break;
		}

		case select:
		{
			return x - 64;
		}
		}
	}
}
void madeBy()
{
	int finish;
	system("cls");
	printf("\n\n\n\n");
	SelectMenu(60, 15);
	printf("프로그래밍 : 이상혁");
	SelectMenu(59, 20);
	printf("스토리&기획&디자인 : 김홍준");
	SelectMenu(65, 30);
	printf("> 종료");
	finish = keyControl();
	if (finish == 6)
		return 0;
}
void mainMenu() {
	system("cls");
	printf("\n\n\n\n");
	printf("##########    ##                       ##                            ##             ####       ##                                                  \n");
	printf("    ##        ##                       ##                        ##########       #      #     ##                                                  \n");
	printf("    ##        ##                       ##                            ##          ##            ##                                                  \n");
	printf("    ##        #######       #####      ##           ###      ##      ##          ##            ##      #######     ##    ###   ####     ##       ##\n");
	printf("    ##        ##    ##    #      #     ##          #   #    #        ##          ##            ##    #       #     ## ###    ##    ##    ##     ## \n");
	printf("    ##        ##     ##   #  #####     ##          #   #     ##      ##          ##            ##    #     ###     ####     ##      ##    ##   ##  \n");
	printf("    ##        ##      #   #            ##          #   ##      #     ##           #      #     ##    #             ##        ##    ####    ## ##   \n");
	printf("    ##        ##      #    #######     ##########   ###  #   ##      ##             ####       ##      #######     ##          ####  ##     ##     \n");
	printf("                                                                                                                                     ##    ##      \n");
	printf("                                                                                                                                  ###     ##       \n");
}
int MenuDraw()
{
	int x = 73;
	int y = 24;
	SelectMenu(x - 2, y);//24
	printf("> 게임시작");
	SelectMenu(x, y + 3);//27
	printf("만든사람");
	SelectMenu(x, y + 6);//30
	printf(" 종료");
	while (1)
	{
		int n = keyControl();
		switch (n)
		{
		case 0:
		{
			if (y > 24)
			{
				SelectMenu(x - 2, y);
				printf(" ");
				SelectMenu(x - 2, y -= 3);
				printf(">");
			}
			break;
		}

		case 1://down
		{
			if (y < 30)
			{
				SelectMenu(x - 2, y);
				printf(" ");
				SelectMenu(x - 2, y += 3);
				printf(">");
			}
			break;
		}

		case select:
		{
			return y - 24;
		}
		}
	}
}
void SelectMenu(int x, int y)
{
	HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD Point;
	Point.X = x;
	Point.Y = y;
	SetConsoleCursorPosition(consoleHandle, Point);
}
void SetConsole() {
	system("The Last Clergy"); // 콘솔창 이름 설정
	system("mode con cols=40 lines=156"); // 콘솔창 크기설정

	CONSOLE_CURSOR_INFO ConsoleCursor;
	ConsoleCursor.bVisible = 0;
	ConsoleCursor.dwSize = 1;
	HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleCursorInfo(consoleHandle, &ConsoleCursor);
}
void textcolor(int color_number)
{
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color_number);
}

int drawing_tool_result(int painting[40][156], int y, int x, int print_x, int print_y, int maxx, int maxy)
{
	for (int i = 0; i < 40; i++)
	{
		print_y++;
		print_x = maxx;
		for (int j = 0; j < 156; j++)
		{
			SelectMenu(print_x += 1, print_y);
			if (painting[i][j] == 0)
			{
				SET_COLOR(BACKGROUND, 255, 255, 255);
				printf(" " RESET);
			}
			else if (painting[i][j] == 1)
			{
				SET_COLOR(BACKGROUND, 252, 255, 122);
				printf(" " RESET);
			}
			else if (painting[i][j] == 2)
			{
				SET_COLOR(BACKGROUND, 252, 237, 84);
				printf(" " RESET);
			}
			else if (painting[i][j] == 3)
			{
				SET_COLOR(BACKGROUND, 255, 232, 0);
				printf(" " RESET);
			}
			else if (painting[i][j] == 4)
			{
				SET_COLOR(BACKGROUND, 244, 194, 73);
				printf(" " RESET);
			}
			else if (painting[i][j] == 5)
			{
				SET_COLOR(BACKGROUND, 218, 103, 58);
				printf(" " RESET);
			}
			else if (painting[i][j] == 6)
			{
				printf(" ");
			}
			else if (painting[i][j] == 7)
			{
				SET_COLOR(BACKGROUND, 255, 249, 178);
				printf(" " RESET);
			}
			else if (painting[i][j] == 8)
			{
				SET_COLOR(BACKGROUND, 255, 242, 77);
				printf(" " RESET);
			}
			else if (painting[i][j] == 15)
			{
				SET_COLOR(BACKGROUND, 223, 105, 35);
				printf(" " RESET);
			}
			else if (painting[i][j] == 23)
			{
				SET_COLOR(BACKGROUND, 105, 209, 255);
				printf(" " RESET);
			}
			else if (painting[i][j] == 24)
			{
				SET_COLOR(BACKGROUND, 190, 255, 152);
				printf(" " RESET);
			}
			else if (painting[i][j] == 25)
			{
				SET_COLOR(BACKGROUND, 255, 0, 0);
				printf(" " RESET);
			}
			else if (painting[i][j] == 26)
			{
				SET_COLOR(BACKGROUND, 0, 0, 0);
				printf(" " RESET);
			}
			else if (painting[i][j] == 27)
			{
				SET_COLOR(BACKGROUND, 255, 0, 0);
				printf(" " RESET);
			}
		}
		printf("\n");
	}
};
int drawing_tool(int painting[11][11], int y, int x, int print_x, int print_y, int maxx, int maxy)//6 40
{
	for (int i = 0; i < 11; i++)
	{
		print_y++;
		print_x = maxx;
		for (int j = 0; j < 11; j++)
		{
			SelectMenu(print_x += 2, print_y);
			if (painting[i][j] == 0)
			{
				SET_COLOR(BACKGROUND, 255, 255, 255);
				printf("  " RESET);
			}
			else if (painting[i][j] == 1)
			{
				SET_COLOR(BACKGROUND, 252, 255, 122);
				printf("  " RESET);
			}
			else if (painting[i][j] == 2)
			{
				SET_COLOR(BACKGROUND, 252, 237, 84);
				printf("  " RESET);
			}
			else if (painting[i][j] == 3)
			{
				SET_COLOR(BACKGROUND, 255, 232, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 4)
			{
				SET_COLOR(BACKGROUND, 244, 194, 73);
				printf("  " RESET);
			}
			else if (painting[i][j] == 5)
			{
				SET_COLOR(BACKGROUND, 218, 103, 58);
				printf("  " RESET);
			}
			else if (painting[i][j] == 6)
			{
				printf("  ");
			}
			else if (painting[i][j] == 7)
			{
				SET_COLOR(BACKGROUND, 255, 249, 178);
				printf("  " RESET);
			}
			else if (painting[i][j] == 8)
			{
				SET_COLOR(BACKGROUND, 255, 242, 77);
				printf("  " RESET);
			}
			else if (painting[i][j] == 15)
			{
				SET_COLOR(BACKGROUND, 223, 105, 35);
				printf("  " RESET);
			}
			else if (painting[i][j] == 23)
			{
				SET_COLOR(BACKGROUND, 105, 209, 255);
				printf("  " RESET);
			}
			else if (painting[i][j] == 24)
			{
				SET_COLOR(BACKGROUND, 190, 255, 152);
				printf("  " RESET);
			}
			else if (painting[i][j] == 25)
			{
				SET_COLOR(BACKGROUND, 255, 0, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 26)
			{
				SET_COLOR(BACKGROUND, 0, 0, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 27)
			{
				SET_COLOR(BACKGROUND, 255, 0, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 28)
			{
				SET_COLOR(BACKGROUND, 255, 152, 186);
				printf("  " RESET);
			}
			else if (painting[i][j] == 29)
			{
				SET_COLOR(BACKGROUND, 201, 173, 73);
				printf("  " RESET);
			}
			else if (painting[i][j] == 30)
			{
				SET_COLOR(BACKGROUND, 35, 31, 56);
				printf("  " RESET);
			}
			else if (painting[i][j] == 31)
			{
				SET_COLOR(BACKGROUND, 145, 65, 54);
				printf("  " RESET);
			}
			else if (painting[i][j] == 32)
			{
				SET_COLOR(BACKGROUND, 145, 65, 54);
				printf("  " RESET);
			}
			else if (painting[i][j] == 33)
			{
				SET_COLOR(BACKGROUND, 255, 235, 0);
				printf("  " RESET);
			}
		}
		printf("\n");
	}
};
int drawing_tool_side(int painting[15][20], int y, int x, int print_x, int print_y, int maxx, int maxy)
{
	for (int i = 0; i < 15; i++)
	{
		print_y++;
		print_x = maxx;
		for (int j = 0; j < 20; j++)
		{
			SelectMenu(print_x += 2, print_y);
			if (painting[i][j] == 0)
			{
				SET_COLOR(BACKGROUND, 255, 255, 255);
				printf("  " RESET);
			}
			else if (painting[i][j] == 1)
			{
				SET_COLOR(BACKGROUND, 252, 255, 122);
				printf("  " RESET);
			}
			else if (painting[i][j] == 2)
			{
				SET_COLOR(BACKGROUND, 252, 237, 84);
				printf("  " RESET);
			}
			else if (painting[i][j] == 3)
			{
				SET_COLOR(BACKGROUND, 255, 232, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 4)
			{
				SET_COLOR(BACKGROUND, 244, 194, 73);
				printf("  " RESET);
			}
			else if (painting[i][j] == 5)
			{
				SET_COLOR(BACKGROUND, 218, 103, 58);
				printf("  " RESET);
			}
			else if (painting[i][j] == 6)
			{
				printf("  ");
			}
			else if (painting[i][j] == 7)
			{
				SET_COLOR(BACKGROUND, 255, 249, 178);
				printf("  " RESET);
			}
			else if (painting[i][j] == 8)
			{
				SET_COLOR(BACKGROUND, 255, 242, 77);
				printf("  " RESET);
			}
			else if (painting[i][j] == 15)
			{
				SET_COLOR(BACKGROUND, 223, 105, 35);
				printf("  " RESET);
			}
			else if (painting[i][j] == 23)
			{
				SET_COLOR(BACKGROUND, 105, 209, 255);
				printf("  " RESET);
			}
			else if (painting[i][j] == 24)
			{
				SET_COLOR(BACKGROUND, 190, 255, 152);
				printf("  " RESET);
			}
			else if (painting[i][j] == 25)
			{
				SET_COLOR(BACKGROUND, 255, 0, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 26)
			{
				SET_COLOR(BACKGROUND, 94, 24, 24);
				printf("  " RESET);
			}
			else if (painting[i][j] == 27)
			{
				SET_COLOR(BACKGROUND, 255, 0, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 28)
			{
				SET_COLOR(BACKGROUND, 255, 152, 186);
				printf("  " RESET);
			}
			else if (painting[i][j] == 29)
			{
				SET_COLOR(BACKGROUND, 201, 173, 73);
				printf("  " RESET);
			}
			else if (painting[i][j] == 30)
			{
				SET_COLOR(BACKGROUND, 35, 31, 56);
				printf("  " RESET);
			}
			else if (painting[i][j] == 31)
			{
				SET_COLOR(BACKGROUND, 145, 65, 54);
				printf("  " RESET);
			}
			else if (painting[i][j] == 32)
			{
				SET_COLOR(BACKGROUND, 48, 255, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 33)
			{
				SET_COLOR(BACKGROUND, 255, 235, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 38)
			{
				SET_COLOR(BACKGROUND, 126, 84, 40);
				printf("  " RESET);
			}
			else if (painting[i][j] == 39)
			{
				SET_COLOR(BACKGROUND, 175, 116, 54);
				printf("  " RESET);
			}
			else if (painting[i][j] == 40)
			{
				SET_COLOR(BACKGROUND, 29, 51, 86);
				printf("  " RESET);
			}
			else if (painting[i][j] == 41)
			{
				SET_COLOR(BACKGROUND, 87, 24, 9);
				printf("  " RESET);
			}
		}
	}
};
int drawing_tool_boss(int painting[20][40], int y, int x, int print_x, int print_y, int maxx, int maxy)
{

	for (int i = 0; i < 20; i++)
	{
		print_y++;
		print_x = maxx;
		for (int j = 0; j < 40; j++)
		{
			SelectMenu(print_x += 2, print_y);
			if (painting[i][j] == NULL)
				continue;
			else if (painting[i][j] == 0)
			{
				SET_COLOR(BACKGROUND, 255, 255, 255);
				printf("  " RESET);
			}
			else if (painting[i][j] == 1)
			{
				SET_COLOR(BACKGROUND, 252, 255, 122);
				printf("  " RESET);
			}
			else if (painting[i][j] == 2)
			{
				SET_COLOR(BACKGROUND, 252, 237, 84);
				printf("  " RESET);
			}
			else if (painting[i][j] == 3)
			{
				SET_COLOR(BACKGROUND, 255, 232, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 4)
			{
				SET_COLOR(BACKGROUND, 244, 194, 73);
				printf("  " RESET);
			}
			else if (painting[i][j] == 5)
			{
				SET_COLOR(BACKGROUND, 218, 103, 58);
				printf("  " RESET);
			}
			else if (painting[i][j] == 6)
			{
				printf("  ");
			}
			else if (painting[i][j] == 7)
			{
				SET_COLOR(BACKGROUND, 255, 249, 178);
				printf("  " RESET);
			}
			else if (painting[i][j] == 8)
			{
				SET_COLOR(BACKGROUND, 255, 242, 77);
				printf("  " RESET);
			}
			else if (painting[i][j] == 15)
			{
				SET_COLOR(BACKGROUND, 223, 105, 35);
				printf("  " RESET);
			}
			else if (painting[i][j] == 23)
			{
				SET_COLOR(BACKGROUND, 105, 209, 255);
				printf("  " RESET);
			}
			else if (painting[i][j] == 24)
			{
				SET_COLOR(BACKGROUND, 190, 255, 152);
				printf("  " RESET);
			}
			else if (painting[i][j] == 25)
			{
				SET_COLOR(BACKGROUND, 255, 0, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 26)
			{
				SET_COLOR(BACKGROUND, 94, 24, 24);
				printf("  " RESET);
			}
			else if (painting[i][j] == 27)
			{
				SET_COLOR(BACKGROUND, 255, 0, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 28)
			{
				SET_COLOR(BACKGROUND, 255, 152, 186);
				printf("  " RESET);
			}
			else if (painting[i][j] == 29)
			{
				SET_COLOR(BACKGROUND, 201, 173, 73);
				printf("  " RESET);
			}
			else if (painting[i][j] == 30)
			{
				SET_COLOR(BACKGROUND, 35, 31, 56);
				printf("  " RESET);
			}
			else if (painting[i][j] == 31)
			{
				SET_COLOR(BACKGROUND, 145, 65, 54);
				printf("  " RESET);
			}
			else if (painting[i][j] == 32)
			{
				SET_COLOR(BACKGROUND, 48, 255, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 33)
			{
				SET_COLOR(BACKGROUND, 255, 235, 0);
				printf("  " RESET);
			}
			else if (painting[i][j] == 38)
			{
				SET_COLOR(BACKGROUND, 126, 84, 40);
				printf("  " RESET);
			}
			else if (painting[i][j] == 39)
			{
				SET_COLOR(BACKGROUND, 175, 116, 54);
				printf("  " RESET);
			}
			else if (painting[i][j] == 40)
			{
				SET_COLOR(BACKGROUND, 29, 51, 86);
				printf("  " RESET);
			}
			else if (painting[i][j] == 41)
			{
				SET_COLOR(BACKGROUND, 87, 24, 9);
				printf("  " RESET);
			}
		}
	}
};
int drawing_tool_total(int enemy, int enemy_boss, int enemy_1)
{
	//하급 악마
	if (enemy == 2)
		drawing_tool_side(lowdevil, 15, 20, 5, 4, 5, 4);
	if (enemy_1 == 2)
		drawing_tool_side(lowdevil, 15, 20, 105, 4, 105, 4);
	//허수아비
	if (enemy == 3)
		drawing_tool_side(scarecrow, 15, 20, 5, 4, 5, 4);
	if (enemy_boss == 3)
		drawing_tool_side(scarecrow, 15, 20, 55, 4, 55, 4);
	if (enemy_1 == 3)
		drawing_tool_side(scarecrow, 15, 20, 105, 4, 105, 4);
};

void script_tool()
{
	SelectMenu(0, 29);
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 156; j++)
		{
			int temp = script_story[i][j];
			if (temp == '1')
			{
				SET_COLOR(BACKGROUND, 255, 255, 255);
				printf("" RESET);
			}
			else if (temp == '2')
				printf(" ");
			else if (temp == '0')
				printf(" ");
		}
		printf("\n");
	}
}
char script_play_hero(char name[100], char script[100][130], int line)
{
	int hero = 10;
	int y = 29;
	SelectMenu(hero, y);
	printf("%s", name);
	SelectMenu(7, 31);
	int a;
	for (int i = 0; i < line; i++)
	{
		a = 31;
		SelectMenu(7, a);
		for (int j = 0; j < 130; j++)
		{
			printf("%c", script[i][j]);
			Sleep(10);
		}
		Sleep(800);
		a -= 2;
		for (int i = 0; i < 6; i++)
		{
			SelectMenu(7, ++a);
			for (int j = 0; j < 130; j++)
			{
				printf(" ");
			}
		}
	}
	SelectMenu(hero, y);
	printf("                              " RESET);
}
char script_play_you(char name[100], char script[100][130], int line)
{
	int you = 134;
	int y = 29;
	SelectMenu(you, y);
	printf("%s", name);
	SelectMenu(7, 31);
	int a;
	for (int i = 0; i < line; i++)
	{
		a = 31;
		SelectMenu(7, a);
		for (int j = 0; j < 130; j++)
		{
			printf("%c", script[i][j]);
			Sleep(10);
		}
		Sleep(800);
		a -= 2;
		for (int i = 0; i < 6; i++)
		{
			SelectMenu(7, ++a);
			for (int j = 0; j < 130; j++)
			{
				printf(" ");
			}
		}
	}
	SelectMenu(you, y);
	printf("                              " RESET);
}

int damage_system(int defense, int attact, int critical, int critical_damage, int decrease_damage)
{
	srand(time(NULL));
	int random = rand() % 100 + 1;
	int sum, late;
	if (random <= critical)
	{
		sum = ((attact * critical_damage) - defense) / decrease_damage;
		if (sum <= 0)
			sum = 0;
		SelectMenu(12, 19);
		printf("CRITICAL!!!");
		return sum;
	}
	sum = ((attact)-defense) / decrease_damage;
	if (sum <= 0)
		sum = 0;
	return sum;
}
char play_battle_enemy(int enemy, int enemy_boss, int enemy_1, int enemy_hp_1_, int enemy_hp_2_, int enemy_hp_3_)
{
	int enemy_hp_1 = enemy_hp_1_;
	int enemy_hp_2 = enemy_hp_2_;
	int enemy_hp_3 = enemy_hp_3_;

	int enemy_attact_1 = ms[enemy].attack;
	int enemy_attact_2 = ms[enemy_boss].attack;
	int enemy_attact_3 = ms[enemy_1].attack;

	int uncount = 0;

	int skill_1th_turn = 0;
	int skill_2th_turn = 4;
	if (enemy_hp_1 <= 0)
		enemy_hp_1 = 0;
	if (enemy_hp_2 <= 0)
		enemy_hp_2 = 0;
	if (enemy_hp_3 <= 0)
		enemy_hp_3 = 0;

	if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
	{
		fail_or_victory = 1;
		return 0;
	}
	if (hp <= 0)
		hp = 0;
	if (hp == 0)
	{
		fail_or_victory = 0;
		return 0;
	}
	while (1)//적턴
	{
		//바알
		if (enemy == 0)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
			{
				fail_or_victory = 1;
				return 0;
			}
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
			{
				fail_or_victory = 0;
				return 0;;
			}
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 2), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			Sleep(1000);
			break;
		}
		if (enemy_boss == 0)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			Sleep(1000);
			break;
		}
		if (enemy_1 == 0)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			Sleep(1000);
			break;
		}

		//중급 악마
		if (enemy == 1)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}
		if (enemy_boss == 1)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}
		if (enemy_1 == 1)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}

		//하급 악마
		if (enemy == 2)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}
		if (enemy_boss == 2)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}
		if (enemy_1 == 2)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}

		//허수아비
		if (enemy == 3)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}
		if (enemy_boss == 3)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}
		if (enemy_1 == 3)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}

		//슬라임
		if (enemy == 4)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}
		if (enemy_boss == 4)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}
		if (enemy_1 == 4)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}

		//킹 슬라임
		if (enemy == 5)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}
		if (enemy_boss == 5)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}
		if (enemy_1 == 5)
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, enemy_attact_2, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}

		break;
	}
	return 0;
};
char play_battle_system(char hero[100], int enemy, int enemy_boss, int enemy_1)
{
	system("cls");
	int enemy_hp_1 = ms[enemy].hp;
	int enemy_hp_2 = ms[enemy_boss].hp;
	int enemy_hp_3 = ms[enemy_1].hp;
	int uncount;
	int x = 6;
	int y;
	int count = 0;
	int skill = -1;
	int sum_1 = 34;
	int sum_2;
	hp = hp_max;
	hop = hop_max;
	SelectMenu(name_x, name_y);
	printf("%s", hero);
	SelectMenu(56, 40);
	textcolor(12);
	for (int i = 0; i < hp / (hp_max / 10); i++)
		printf("■");
	textcolor(14);
	SelectMenu(85, 40);
	for (int i = 0; i < hop / (hop_max / 10); i++)
		printf("■");
	textcolor(15);
	SelectMenu(50, 40);
	textcolor(red);
	printf("%d", hp);
	SelectMenu(97, 40);
	textcolor(yellow);
	printf("%d", hop);
	textcolor(white);
	drawing_tool(shieldicon, 11, 12, 6, 28, 6, 28);
	drawing_tool(swordicon, 11, 11, 46, 28, 46, 28);
	drawing_tool(fire, 11, 11, 86, 28, 86, 28);
	drawing_tool(salvation, 11, 11, 126, 28, 126, 28);
	int x_2 = 21;//21 59 97 145
	int y_2 = 28;
	SelectMenu(x_2, y_2);
	printf("▼");
	int turn = 1;
	int skill_3th_turn = 0;
	int light_1 = 1;
	SelectMenu(24, 3);
	printf("%s", ms[enemy].name);
	SelectMenu(72, 3);
	printf("%s", ms[enemy_boss].name);
	SelectMenu(123, 3);
	printf("%s", ms[enemy_1].name);
	int a = 0;
	drawing_tool_total(enemy, enemy_boss, enemy_1);

	int sum;
	while (1)
	{
		if (enemy_hp_1 <= 0)
			enemy_hp_1 = 0;
		if (enemy_hp_2 <= 0)
			enemy_hp_2 = 0;
		if (enemy_hp_3 <= 0)
			enemy_hp_3 = 0;

		if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
		{
			fail_or_victory = 1;
			break;
		}
		if (hp <= 0)
			hp = 0;
		if (hp == 0)
		{
			fail_or_victory = 0;
			break;
		}
		int light = 1;
		int light_2 = 1;
		int su = 4;
		SelectMenu(0, 23);
		printf("                                                                                                               ");
		SelectMenu(25, 4);
		printf("%d", enemy_hp_1);
		SelectMenu(75, 4);
		printf("%d", enemy_hp_2);
		SelectMenu(125, 4);
		printf("%d", enemy_hp_3);
		if (enemy_hp_1 == 0)
		{
			drawing_tool_side(monster_die, 15, 20, 5, 4, 5, 4);
		}
		if (enemy_hp_2 == 0)
		{
			drawing_tool_side(monster_die, 15, 20, 105, 4, 105, 4);
		}
		if (enemy_hp_3 == 0)
		{
			drawing_tool_side(monster_die, 15, 20, 105, 4, 105, 4);
		}
		int x_3 = 75;
		int y_3 = 23;
		int count = 0;
		uncount = 0;
		int quest = 0;
		decrease_damage = 1;
		while (1)//우리턴
		{
			if (light == 0)
				break;
			textcolor(3);
			SelectMenu(1, 1);
			printf("%d턴", turn);
			if (skill_3th_turn != 0)
			{
				SelectMenu(96, 36);
				printf("%d턴", skill_3th_turn);
			}
			else if (skill_3th_turn == 0)
			{
				SelectMenu(96, 36);
				printf("     ");
			}
			int count_1 = 0;
			textcolor(15);
			do
			{
				if (light == 0)
					continue;
				int a = keyControl();
				switch (a)
				{
				case skill_1:
					SelectMenu(x_2, y_2);
					printf(" ");
					x_2 = 21;
					SelectMenu(x_2, y_2);
					printf(FG_COLOR(46, 254, 154) "▼" RESET);
					SelectMenu(0, 39);
					printf("                                                                                                                                                                                      ");
					SelectMenu(0, 28);
					printf("                                                                                                                                                                                      ");
					drawing_tool(shieldicon, 11, 11, 6, 27, 6, 27);// x + 40
					drawing_tool(swordicon, 11, 11, 46, 28, 46, 28);
					drawing_tool(fire, 11, 11, 86, 28, 86, 28);
					drawing_tool(salvation, 11, 11, 126, 28, 126, 28);
					break;
				case up:
					SelectMenu(x_2, y_2);
					printf(" ");
					x_2 = 59;
					SelectMenu(x_2, y_2);
					printf(FG_COLOR(46, 254, 154) "▼" RESET);
					SelectMenu(0, 39);
					printf("                                                                                                                                                                                     ");
					SelectMenu(0, 28);
					printf("                                                                                                                                                                                      ");
					drawing_tool(shieldicon, 11, 12, 6, 28, 6, 28);
					drawing_tool(swordicon, 11, 11, 46, 27, 46, 27);
					drawing_tool(fire, 11, 11, 86, 28, 86, 28);
					drawing_tool(salvation, 11, 11, 126, 28, 126, 28);
					break;
				case skill_3:
					SelectMenu(x_2, y_2);
					printf(" ");
					x_2 = 97;
					SelectMenu(x_2, y_2);
					printf(FG_COLOR(46, 254, 154) "▼" RESET);
					SelectMenu(0, 39);
					printf("                                                                                                                                                                                         ");
					SelectMenu(0, 28);
					printf("                                                                                                                                                                                                 ");
					drawing_tool(shieldicon, 11, 12, 6, 28, 6, 28);
					drawing_tool(swordicon, 11, 11, 46, 28, 46, 28);
					drawing_tool(fire, 11, 11, 86, 27, 86, 27);
					drawing_tool(salvation, 11, 11, 126, 28, 126, 28);
					break;
				case skill_4:
					SelectMenu(x_2, y_2);
					printf(" ");
					x_2 = 135;
					SelectMenu(x_2, y_2);
					printf(FG_COLOR(46, 254, 154) "▼" RESET);
					SelectMenu(0, 39);
					printf("                                                                                                                                                                                         ");
					SelectMenu(0, 28);
					printf("                                                                                                                                                                                                 ");
					drawing_tool(shieldicon, 11, 12, 6, 28, 6, 28);
					drawing_tool(swordicon, 11, 11, 46, 28, 46, 28);
					drawing_tool(fire, 11, 11, 86, 28, 86, 28);
					drawing_tool(salvation, 11, 11, 126, 27, 126, 27);
					break;
				case information:
					SelectMenu(x_2, y_2 + 1);
					if (x_2 == 21)
					{
						SelectMenu(x_2 - 9, y_2 - 4);
						printf("성령의 방패");
						SelectMenu(x_2 - 9, y_2 - 2);
						printf("받는 피해를 50%% 감소 시키고, 다음공격 크리티컬 확률이 100%%로 증가합니다");
						Sleep(1500);
						SelectMenu(x_2 - 9, y_2 - 2);
						printf("                                                                    ");
						SelectMenu(x_2 - 9, y_2 - 4);
						printf("                                         ");
						break;
					}
					if (x_2 == 59)
					{
						SelectMenu(x_2 - 9, y_2 - 4);
						printf("");
						SelectMenu(x_2 - 15, y_2 - 2);
						printf("자신의 hp의 10%%를 회복하고 공격력의 100%%만큼 단일적군에게 입힙니다/hop10%% 회복");
						Sleep(1500);
						SelectMenu(x_2 - 15, y_2 - 2);
						printf("                                                                            ");
						break;
					}
					if (x_2 == 97)
					{
						SelectMenu(x_2 - 15, y_2 - 2);
						printf("공격력의 80%%만큼의 피해를 적군전체에게 입힙니다/hop30 소모");
						Sleep(1500);
						SelectMenu(x_2 - 15, y_2 - 2);
						printf("                                                                      ");
						break;
					}
					if (x_2 == 135)
					{
						SelectMenu(x_2 - 100, y_2 - 2);
						printf("공격력의 1200%%만큼 단일적군에게 피해를 주고 피해의 절반만큼 전체를 공격합니다/hop80 소모");
						SelectMenu(x_2 - 100, y_2 - 2);
						Sleep(2000);
						printf("                                                                                        ");
						break;
					}
				case select:
					while (light_2)
					{
						if (x_2 == 21)
							break;
						light_2 = 1;
						SelectMenu(x_3, y_3);//75 23
						printf("▲");
						a = keyControl();
						switch (a)
						{
						case left:
							if (x_3 > 45)
							{
								SelectMenu(x_3, y_3);
								printf(" ");
								SelectMenu(x_3 -= 50, y_3);// 25 75 125
								printf("▲");
								break;
							}
						case right:
							if (x_3 < 105)
							{
								SelectMenu(x_3, y_3);
								printf(" ");
								SelectMenu(x_3 += 50, y_3);
								printf("▲");
								break;
							}
						case select:
							if (x_3 - 25 == 0)
							{
								if (enemy_hp_1 == 0)
									break;
								count = 1;
								light_2 = 0;
								break;
							}
							else if (x_3 - 25 == 50)
							{
								if (enemy_hp_2 == 0)
									break;
								count = 2;
								light_2 = 0;
								break;
							}
							else if (x_3 - 25 == 100)
							{
								if (enemy_hp_3 == 0)
									break;
								count = 3;
								light_2 = 0;
								break;
							}
						}
					}
					sum = 0;
					SelectMenu(70, 26);
					if (x_2 == 21)
					{
						printf("성령의 방패 발동!");
						if (skill_3th_turn > 0)
							skill_3th_turn--;
						light = 0;
						decrease_damage = 2;
						critical = 100;
					}
					if (x_2 == 59)
					{
						printf("정화의 빛 발동!");
						if (hop != 100)
						{
							hop += 10;
							if (hop >= 100)
								hop = 100;
						}
						if (hp != 100)
						{
							hp += hp_max / 10;
							if (hp >= hp_max)
								hp = hp_max;
							SelectMenu(50, 40);
							textcolor(red);
							printf("%d", hp);
							int x = 56;
							for (int i = 0; i < (hp / (hp_max / 10)); i++)
							{
								SelectMenu((x += 1), 40);
								printf("■");
							}
							textcolor(white);
						}
						if (count == 1)
						{
							sum = damage_system(0, attack, critical, critical_damage, 1);
							enemy_hp_1 -= sum;
							SelectMenu(25, 4);
							printf("           ");
							SelectMenu(25, 4);
							if (enemy_hp_1 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_1);
							hop += 10;
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop);
						}
						if (count == 2)
						{
							sum = damage_system(0, attack, critical, critical_damage, 1);
							enemy_hp_2 -= sum;
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (enemy_hp_2 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_2);
							hop += 10;
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop);
						}
						if (count == 3)
						{
							sum = damage_system(0, attack, critical, critical_damage, 1);
							enemy_hp_3 -= sum;
							SelectMenu(125, 4);
							printf("           ");
							SelectMenu(125, 4);
							if (enemy_hp_3 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_3);
							hop += 10;
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop);
						}
						if (skill_3th_turn > 0)
							skill_3th_turn--;
						light = 0;
						critical = 15;
						SelectMenu(12, 20);
						textcolor(yellow);
						printf("TOTAL ");
						printf("%d", sum);
					}
					if (x_2 == 97)
					{
						if (skill_3th_turn > 0)
						{
							printf("%d턴 남았습니다", skill_3th_turn);
							Sleep(1000);
							printf("                   ");
							break;
						}
						if (hop < 80)
						{
							textcolor(14);
							printf("hop");
							textcolor(15);
							printf("가 부족합니다");
							Sleep(1000);
							printf("                  ");
							break;
						}
						printf("구마의 손길 발동!");
						hop -= 30;
						if (count == 1 || count == 2 || count == 3)
						{
							sum = damage_system(0, attack - (attack / 5), critical, critical_damage, 1);
							enemy_hp_1 -= sum;
							enemy_hp_2 -= sum;
							enemy_hp_3 -= sum;
							SelectMenu(25, 4);
							printf("           ");
							SelectMenu(25, 4);
							if (enemy_hp_1 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_1);
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (enemy_hp_2 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_2);
							SelectMenu(125, 4);
							printf("           ");
							SelectMenu(125, 4);
							if (enemy_hp_3 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_3);
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop);
						}
						skill_3th_turn = 4;
						light = 0;
						critical = 15;
						SelectMenu(12, 20);
						textcolor(yellow);
						printf("TOTAL ");
						printf("%d", sum * 3);
					}
					int sum_2 = 0;
					if (x_2 == 135)
					{
						if (hop <= 80)
						{
							textcolor(14);
							printf("hop");
							textcolor(15);
							printf("가 부족합니다");
							break;
						}
						printf("구원의 빛 발동!");
						hop -= 80;
						if (count == 1)
						{
							sum = damage_system(0, attack * 12, critical, critical_damage, 1);
							sum_2 = sum / 2;
							enemy_hp_1 -= sum;
							enemy_hp_2 -= sum_2;
							enemy_hp_3 -= sum_2;
							SelectMenu(25, 4);
							printf("           ");
							SelectMenu(25, 4);
							if (enemy_hp_1 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_1);
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (enemy_hp_2 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_2);
							SelectMenu(125, 4);
							printf("           ");
							SelectMenu(125, 4);
							if (enemy_hp_3 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_3);
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop);
							SelectMenu(25, 4);
							printf("       ");
							SelectMenu(75, 4);
							printf("       ");
							SelectMenu(125, 4);
							printf("       ");
						}
						if (count == 2)
						{
							sum = damage_system(0, attack * 12, critical, critical_damage, 1);
							sum_2 = sum / 2;
							enemy_hp_1 -= sum_2;
							enemy_hp_2 -= sum;
							enemy_hp_3 -= sum_2;
							SelectMenu(25, 4);
							printf("           ");
							SelectMenu(25, 4);
							if (enemy_hp_1 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_1);
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (enemy_hp_2 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_2);
							SelectMenu(125, 4);
							printf("           ");
							SelectMenu(125, 4);
							if (enemy_hp_3 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_3);
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop);
							SelectMenu(25, 4);
							printf("       ");
							SelectMenu(75, 4);
							printf("       ");
							SelectMenu(125, 4);
							printf("       ");
						}
						if (count == 3)
						{
							sum = damage_system(0, attack * 12, critical, critical_damage, 1);
							enemy_hp_1 -= sum_2;
							enemy_hp_2 -= sum_2;
							enemy_hp_3 -= sum;
							SelectMenu(25, 4);
							printf("           ");
							SelectMenu(25, 4);
							if (enemy_hp_1 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_1);
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (enemy_hp_2 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_2);
							SelectMenu(125, 4);
							printf("           ");
							SelectMenu(125, 4);
							if (enemy_hp_3 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_3);
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop);
							SelectMenu(25, 4);
							printf("       ");
							SelectMenu(75, 4);
							printf("       ");
							SelectMenu(125, 4);
							printf("       ");
							break;
						}
						sum += sum_2;
						skill_3th_turn--;
						light = 0;
						critical = 15;
						SelectMenu(12, 20);
						textcolor(yellow);
						printf("TOTAL ");
						printf("%d", sum);
					}
					light = 0;
					Sleep(1000);
					SelectMenu(70, 26);
					printf("                 ");

					break;
				}
			} while (light);
		}
		Sleep(2000);
		textcolor(white);
		SelectMenu(12, 20);
		printf("           ");
		SelectMenu(12, 19);
		printf("             ");
		//적턴
		play_battle_enemy(enemy, enemy_boss, enemy_1, enemy_hp_1, enemy_hp_2, enemy_hp_3);
		if (fail_or_victory == 1 || fail_or_victory == 0)
			break;
	}
}
char play_battle_tutorial(int hero, int enemy, int enemy_boss, int enemy_1)
{
	int hp_MR = ch[hero].hp;
	int hp_MR_max = ch[hero].hp_max;
	int hop_MR = ch[hero].hop;
	int hop_MR_max = ch[hero].hop_max;
	int attact_MR = ch[hero].attack;
	int defense_MR = ch[hero].defense;
	int critical_MR = ch[hero].critical;
	int critical_damage_MR = ch[hero].critical_damage;//2배
	int decrease_damage_MR = ch[hero].decrese_damage;

	int x = 6;
	int y;
	int count = 0;
	int skill = -1;
	int sum_1 = 34;
	int sum_2;
	SelectMenu(name_x, name_y);
	printf("%s", ch[hero].name);
	SelectMenu(56, 40);
	textcolor(12);
	for (int i = 0; i < hp_MR / (hp_MR_max / 10); i++)
		printf("■");
	textcolor(14);
	SelectMenu(85, 40);
	for (int i = 0; i < hop_MR / (hop_MR_max / 10); i++)
		printf("■");
	textcolor(15);
	SelectMenu(49, 40);
	textcolor(red);
	printf("%d", hp_MR);
	SelectMenu(97, 40);
	textcolor(yellow);
	printf("%d", hop_MR);
	textcolor(white);
	drawing_tool(shieldicon, 11, 12, 6, 28, 6, 28);
	drawing_tool(swordicon, 11, 11, 46, 28, 46, 28);
	drawing_tool(fire, 11, 11, 86, 28, 86, 28);
	drawing_tool(salvation, 11, 11, 126, 28, 126, 28);
	int x_2 = 21;//21 59 97 145
	int y_2 = 28;
	SelectMenu(x_2, y_2);
	printf("▼");
	int turn = 1;
	int skill_3th_turn = 0;
	int light_1 = 1;
	SelectMenu(24, 3);
	printf("%s", ms[enemy].name);
	SelectMenu(72, 3);
	printf("%s", ms[enemy_boss].name);
	SelectMenu(123, 3);
	printf("%s", ms[enemy_1].name);

	int enemy_hp_1 = ms[enemy].hp;
	int enemy_hp_2 = ms[enemy_boss].hp;
	int enemy_hp_3 = ms[enemy_1].hp;

	int enemy_attact_1 = ms[enemy].attack;
	int enemy_attact_2 = ms[enemy_boss].attack;
	int enemy_attact_3 = ms[enemy_1].attack;

	int uncount = 0;

	int skill_1th_turn = 0;
	int skill_2th_turn = 4;

	int a = 0;

	int sum;

	int tutorial_qwer = 0;
	int tutorial_f = 0;
	int tutorial_ad = 0;
	int tutorial_space = 0;
	while (1)
	{
		if (enemy_hp_1 <= 0)
			enemy_hp_1 = 0;
		if (enemy_hp_2 <= 0)
			enemy_hp_2 = 0;
		if (enemy_hp_3 <= 0)
			enemy_hp_3 = 0;

		if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
			break;
		if (hp_MR <= 0)
			hp_MR = 0;
		if (hp_MR == 0)
			break;
		int light = 1;
		int light_2 = 1;
		int su = 4;
		SelectMenu(0, 23);
		printf("                                                                                                               ");
		SelectMenu(25, 4);
		printf("%d", enemy_hp_1);
		SelectMenu(75, 4);
		printf("%d", enemy_hp_2);
		SelectMenu(125, 4);
		printf("%d", enemy_hp_3);
		drawing_tool_side(lowdevil, 15, 20, 5, 4, 5, 4);
		drawing_tool_side(lowdevil, 15, 20, 105, 4, 105, 4);
		if (enemy_hp_1 == 0)
		{
			drawing_tool_side(monster_die, 15, 20, 5, 4, 5, 4);
		}
		if (enemy_hp_2 == 0)
		{
			drawing_tool_side(monster_die, 15, 20, 105, 4, 105, 4);
		}
		if (enemy_hp_3 == 0)
		{
			drawing_tool_side(monster_die, 15, 20, 105, 4, 105, 4);
		}
		int x_3 = 75;
		int y_3 = 23;
		int count = 0;
		uncount = 0;
		int quest = 0;
		decrease_damage_MR = 1;
		while (1)//우리턴
		{
			if (light == 0)
				break;
			textcolor(3);
			SelectMenu(1, 1);
			printf("%d턴", turn);
			if (skill_3th_turn != 0)
			{
				SelectMenu(96, 36);
				printf("%d턴", skill_3th_turn);
			}
			else if (skill_3th_turn == 0)
			{
				SelectMenu(96, 36);
				printf("     ");
			}
			int count_1 = 0;
			textcolor(15);
			if (tutorial_qwer == 0)
			{
				int a = 0;
				textcolor(blue);
				SelectMenu(63, 20);
				printf("Q,W,E,R로 스킬을 선택하세요(SPACE 닫기)");
				while (1)
				{
					int n = keyControl();
					switch (n)
					{
					case select:
					{
						SelectMenu(63, 20);
						printf("                                                  ");
						tutorial_qwer++;
						a++;
						break;
					}
					}
					if (a != 0)
						break;
					textcolor(white);
				}
			}
			do
			{
				if (tutorial_f == 5)
				{
					int a = 0;
					while (1)
					{
						textcolor(blue);
						SelectMenu(63, 20);
						printf("F로 스킬의 정보를 볼 수 있어요(4번 정보를 보자)");
						int n = keyControl();
						switch (n)
						{
						case select:
							SelectMenu(63, 20);
							printf("                                                  ");
							a++;
							break;
						}
						if (a != 0)
							break;
						tutorial_f++;
						textcolor(white);
					}
				}
				if (tutorial_space == 4)
				{
					textcolor(blue);
					SelectMenu(63, 20);
					printf("SPACE로 스킬을 선택할 수 있어요");
					int n = keyControl();
					switch (n)
					{
					case select:
						SelectMenu(63, 20);
						printf("                                                  ");
					}
					tutorial_space++;
					textcolor(white);
				}
				if (tutorial_space == 5)
				{
					textcolor(blue);
					SelectMenu(63, 20);
					printf("A, D로 대상을 선택할 수 있어요");
					int n = keyControl();
					switch (n)
					{
					case select:
						SelectMenu(63, 20);
						printf("                                                  ");
					}
					tutorial_space++;
					textcolor(white);
				}
				if (light == 0)
					continue;
				int a = keyControl();
				switch (a)
				{
				case skill_1:
					SelectMenu(x_2, y_2);
					printf(" ");
					x_2 = 21;
					SelectMenu(x_2, y_2);
					printf(FG_COLOR(46, 254, 154) "▼" RESET);
					SelectMenu(0, 39);
					printf("                                                                                                                                                                                      ");
					SelectMenu(0, 28);
					printf("                                                                                                                                                                                      ");
					drawing_tool(shieldicon, 11, 11, 6, 27, 6, 27);// x + 40
					drawing_tool(swordicon, 11, 11, 46, 28, 46, 28);
					drawing_tool(fire, 11, 11, 86, 28, 86, 28);
					drawing_tool(salvation, 11, 11, 126, 28, 126, 28);
					tutorial_f++;
					break;
				case up:
					SelectMenu(x_2, y_2);
					printf(" ");
					x_2 = 59;
					SelectMenu(x_2, y_2);
					printf(FG_COLOR(46, 254, 154) "▼" RESET);
					SelectMenu(0, 39);
					printf("                                                                                                                                                                                     ");
					SelectMenu(0, 28);
					printf("                                                                                                                                                                                      ");
					drawing_tool(shieldicon, 11, 12, 6, 28, 6, 28);
					drawing_tool(swordicon, 11, 11, 46, 27, 46, 27);
					drawing_tool(fire, 11, 11, 86, 28, 86, 28);
					drawing_tool(salvation, 11, 11, 126, 28, 126, 28);
					tutorial_f++;
					break;
				case skill_3:
					SelectMenu(x_2, y_2);
					printf(" ");
					x_2 = 97;
					SelectMenu(x_2, y_2);
					printf(FG_COLOR(46, 254, 154) "▼" RESET);
					SelectMenu(0, 39);
					printf("                                                                                                                                                                                         ");
					SelectMenu(0, 28);
					printf("                                                                                                                                                                                                 ");
					drawing_tool(shieldicon, 11, 12, 6, 28, 6, 28);
					drawing_tool(swordicon, 11, 11, 46, 28, 46, 28);
					drawing_tool(fire, 11, 11, 86, 27, 86, 27);
					drawing_tool(salvation, 11, 11, 126, 28, 126, 28);
					tutorial_f++;
					break;
				case skill_4:
					SelectMenu(x_2, y_2);
					printf(" ");
					x_2 = 135;
					SelectMenu(x_2, y_2);
					printf(FG_COLOR(46, 254, 154) "▼" RESET);
					SelectMenu(0, 39);
					printf("                                                                                                                                                                                         ");
					SelectMenu(0, 28);
					printf("                                                                                                                                                                                                 ");
					drawing_tool(shieldicon, 11, 12, 6, 28, 6, 28);
					drawing_tool(swordicon, 11, 11, 46, 28, 46, 28);
					drawing_tool(fire, 11, 11, 86, 28, 86, 28);
					drawing_tool(salvation, 11, 11, 126, 27, 126, 27);
					tutorial_f++;
					break;
				case information:
					SelectMenu(x_2, y_2 + 1);
					if (x_2 == 21)
					{
						SelectMenu(x_2 - 9, y_2 - 4);
						printf("성령의 방패");
						SelectMenu(x_2 - 9, y_2 - 2);
						printf("받는 피해를 50%%감소 시키고, 다음공격 크리티컬 확률이 100%%로 증가합니다");
						Sleep(1500);
						SelectMenu(x_2 - 9, y_2 - 2);
						printf("                                                                    ");
						SelectMenu(x_2 - 9, y_2 - 4);
						printf("                                         ");
						tutorial_space++;
						break;
					}
					if (x_2 == 59)
					{
						SelectMenu(x_2 - 9, y_2 - 4);
						printf("정화의 빛");
						SelectMenu(x_2 - 15, y_2 - 2);
						printf("자신의 hp의 10%%를 회복하고 공격력의 100%%만큼 단일적군에게 입힙니다/hop1/10 회복");
						Sleep(1500);
						SelectMenu(x_2 - 15, y_2 - 2);
						printf("                                                                                         ");
						SelectMenu(x_2 - 9, y_2 - 4);
						printf("                  ");
						tutorial_space++;
						break;
					}
					if (x_2 == 97)
					{
						SelectMenu(x_2 - 9, y_2 - 4);
						printf("신성한 화염");
						SelectMenu(x_2 - 15, y_2 - 2);
						printf("공격력의 80%%만큼의 피해를 적군전체에게 입힙니다/hop30 소모");
						Sleep(1500);
						SelectMenu(x_2 - 15, y_2 - 2);
						printf("                                                                      ");
						SelectMenu(x_2 - 9, y_2 - 4);
						printf("                         ");
						tutorial_space++;
						break;
					}
					if (x_2 == 135)
					{
						SelectMenu(x_2 - 9, y_2 - 4);
						printf("일도양단");
						SelectMenu(x_2 - 100, y_2 - 2);
						printf("공격력의 1200%%만큼 단일적군에게 피해를 주고 피해의 절반만큼 전체를 공격합니다/hop80 소모");
						SelectMenu(x_2 - 100, y_2 - 2);
						Sleep(2000);
						printf("                                                                                        ");
						tutorial_space++;
						break;
					}
				case select:
					while (light_2)
					{
						if (x_2 == 21)
							break;
						light_2 = 1;
						SelectMenu(x_3, y_3);//75 23
						printf("▲");
						a = keyControl();
						switch (a)
						{
						case left:
							if (x_3 > 45)
							{
								SelectMenu(x_3, y_3);
								printf(" ");
								SelectMenu(x_3 -= 50, y_3);// 25 75 125
								printf("▲");
								break;
							}
						case right:
							if (x_3 < 105)
							{
								SelectMenu(x_3, y_3);
								printf(" ");
								SelectMenu(x_3 += 50, y_3);
								printf("▲");
								break;
							}
						case select:
							if (x_3 - 25 == 0)
							{
								if (enemy_hp_1 == 0)
									break;
								count = 1;
								light_2 = 0;
								break;
							}
							else if (x_3 - 25 == 50)
							{
								if (enemy_hp_2 == 0)
									break;
								count = 2;
								light_2 = 0;
								break;
							}
							else if (x_3 - 25 == 100)
							{
								if (enemy_hp_3 == 0)
									break;
								count = 3;
								light_2 = 0;
								break;
							}
						}
					}
					sum = 0;
					SelectMenu(70, 26);
					if (x_2 == 21)
					{
						printf("성령의 방패 발동!");
						if (skill_3th_turn > 0)
							skill_3th_turn--;
						light = 0;
						decrease_damage_MR = 2;
						critical_MR = 100;
					}
					if (x_2 == 59)
					{
						printf("정화의 빛 발동!");
						if (hop_MR != 100)
						{
							hop_MR += 10;
							if (hop_MR >= 100)
								hop_MR = 100;
						}
						if (hp_MR != 100)
						{
							hp_MR += hp_MR_max / 10;
							if (hp_MR >= hp_MR_max)
								hp_MR = hp_MR_max;
							SelectMenu(49, 40);
							textcolor(red);
							printf("%d", hp_MR);
							int x = 56;
							for (int i = 0; i < (hp_MR / (hp_MR_max / 10)); i++)
							{
								SelectMenu((x += 1), 40);
								printf("■");
							}
							textcolor(white);
						}
						if (count == 1)
						{
							sum = damage_system(0, attact_MR, critical_MR, critical_damage_MR, 1);
							enemy_hp_1 -= sum;
							SelectMenu(25, 4);
							printf("           ");
							SelectMenu(25, 4);
							if (enemy_hp_1 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_1);
							hop_MR += 10;
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop_MR);
						}
						if (count == 2)
						{
							sum = damage_system(0, attact_MR, critical_MR, critical_damage_MR, 1);
							enemy_hp_2 -= sum;
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (enemy_hp_2 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_2);
							hop_MR += 10;
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop_MR);
						}
						if (count == 3)
						{
							sum = damage_system(0, attact_MR, critical_MR, critical_damage_MR, 1);
							enemy_hp_3 -= sum;
							SelectMenu(125, 4);
							printf("           ");
							SelectMenu(125, 4);
							if (enemy_hp_3 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_3);
							hop_MR += 10;
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop_MR);
						}
						if (skill_3th_turn > 0)
							skill_3th_turn--;
						light = 0;
						critical_MR = 15;
						SelectMenu(12, 20);
						textcolor(yellow);
						printf("TOTAL ");
						printf("%d", sum);
					}
					if (x_2 == 97)
					{
						if (skill_3th_turn > 0)
						{
							printf("%d턴 남았습니다", skill_3th_turn);
							Sleep(1000);
							printf("                   ");
							break;
						}
						if (hop_MR < 80)
						{
							textcolor(14);
							printf("hop");
							textcolor(15);
							printf("가 부족합니다");
							Sleep(1000);
							printf("                  ");
							break;
						}
						printf("신성한 불꽃 발동!");
						hop_MR -= 30;
						if (count == 1 || count == 2 || count == 3)
						{
							sum = damage_system(0, attact_MR - (attact_MR / 5), critical_MR, critical_damage_MR, 1);
							enemy_hp_1 -= sum;
							enemy_hp_2 -= sum;
							enemy_hp_3 -= sum;
							SelectMenu(25, 4);
							printf("           ");
							SelectMenu(25, 4);
							if (enemy_hp_1 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_1);
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (enemy_hp_2 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_2);
							SelectMenu(125, 4);
							printf("           ");
							SelectMenu(125, 4);
							if (enemy_hp_3 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_3);
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop_MR);
						}
						skill_3th_turn = 4;
						light = 0;
						critical_MR = 15;
						SelectMenu(12, 20);
						textcolor(yellow);
						printf("TOTAL ");
						printf("%d", sum * 3);
					}
					int sum_2 = 0;
					if (x_2 == 135)
					{
						if (hop_MR <= 80)
						{
							textcolor(14);
							printf("hop");
							textcolor(15);
							printf("가 부족합니다");
							break;
						}
						printf("일도 양단!");
						hop_MR -= 80;
						if (count == 1)
						{
							sum = damage_system(0, attact_MR * 12, critical_MR, critical_damage_MR, 1);
							sum_2 = sum / 2;
							enemy_hp_1 -= sum;
							enemy_hp_2 -= sum_2;
							enemy_hp_3 -= sum_2;
							SelectMenu(25, 4);
							printf("           ");
							SelectMenu(25, 4);
							printf("%d", enemy_hp_1);
							if (enemy_hp_1 <= 0)
							{
								enemy_hp_1 = 0;
							}
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (enemy_hp_2 <= 0)
							{
								enemy_hp_2 = 0;
							}
							printf("%d", enemy_hp_2);
							SelectMenu(125, 4);
							printf("           ");
							SelectMenu(125, 4);
							if (enemy_hp_3 <= 0)
							{
								enemy_hp_3 = 0;
							}
							printf("%d", enemy_hp_3);
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop_MR);
						}
						if (count == 2)
						{
							sum = damage_system(0, attact_MR * 12, critical_MR, critical_damage_MR, 1);
							sum_2 = sum / 2;
							enemy_hp_1 -= sum_2;
							enemy_hp_2 -= sum;
							enemy_hp_3 -= sum_2;
							SelectMenu(25, 4);
							printf("           ");
							SelectMenu(25, 4);
							if (enemy_hp_1 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_1);
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (enemy_hp_2 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_2);
							SelectMenu(125, 4);
							printf("           ");
							SelectMenu(125, 4);
							if (enemy_hp_3 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_3);
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop_MR);
						}
						if (count == 3)
						{
							sum = damage_system(0, attact_MR * 12, critical_MR, critical_damage_MR, 1);
							enemy_hp_1 -= sum_2;
							enemy_hp_2 -= sum_2;
							enemy_hp_3 -= sum;
							SelectMenu(25, 4);
							printf("           ");
							SelectMenu(25, 4);
							if (enemy_hp_1 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_1);
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (enemy_hp_2 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_2);
							SelectMenu(125, 4);
							printf("           ");
							SelectMenu(125, 4);
							if (enemy_hp_3 <= 0)
							{
								printf("0");
							}
							else
								printf("%d", enemy_hp_3);
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop_MR);
							break;
						}
						sum += sum_2;
						skill_3th_turn--;
						light = 0;
						critical_MR = 15;
						SelectMenu(12, 20);
						textcolor(yellow);
						printf("TOTAL ");
						printf("%d", sum);
					}
					light = 0;
					Sleep(1000);
					SelectMenu(70, 26);
					printf("                 ");

					break;
				}
			} while (light);
		}
		Sleep(2000);
		textcolor(white);
		SelectMenu(12, 20);
		printf("              ");
		SelectMenu(12, 19);
		printf("               ");
		while (1)//적턴
		{
			if (enemy_hp_1 <= 0)
				enemy_hp_1 = 0;
			if (enemy_hp_2 <= 0)
				enemy_hp_2 = 0;
			if (enemy_hp_3 <= 0)
				enemy_hp_3 = 0;

			if (enemy_hp_1 == 0 && enemy_hp_2 == 0 && enemy_hp_3 == 0)
				break;
			if (hp_MR <= 0)
				hp_MR = 0;
			if (hp_MR == 0)
				break;
			int sum;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense_MR, enemy_attact_2 + (enemy_attact_2 / 5), 0, 0, decrease_damage_MR);
				hp_MR -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(49, 40);
				textcolor(red);
				printf("%d", hp_MR);
				SelectMenu(56, 40);
				printf("               ");
				SelectMenu(56, 40);
				for (int i = 0; i < hp_MR / (hp_MR_max / 10); i++)
				{
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense_MR, enemy_attact_2, 0, 0, decrease_damage_MR);
				hp_MR -= sum;
				int x = 56;
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(49, 40);
				textcolor(red);
				printf("%d", hp_MR);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp_MR / (hp_MR_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			turn++;
			Sleep(2000);
			SelectMenu(12, 20);
			printf("           ");
			textcolor(white);
			break;
		}
	}
	return 0;
}
char play_battle_boss(int hero, int boss_status)
{
	int hp = ch[hero].hp;
	int hp_max = ch[hero].hp_max;
	int hop = ch[hero].hop;
	int hop_max = ch[hero].hop_max;
	int attact = ch[hero].attack;
	int defense = ch[hero].defense;
	int critical = ch[hero].critical;
	int critical_damage = ch[hero].critical_damage;//2배
	int decrease_damage = ch[hero].decrese_damage;
	int x = 6;
	int y;
	int count = 0;
	int skill = -1;
	int sum_1 = 34;
	int sum_2;
	SelectMenu(name_x, name_y);
	printf("%s", ch[hero].name);
	SelectMenu(56, 40);
	textcolor(12);
	for (int i = 0; i < hp / (hp_max / 10); i++)
		printf("■");
	textcolor(14);
	SelectMenu(85, 40);
	for (int i = 0; i < hop / (hop_max / 10); i++)
		printf("■");
	textcolor(15);
	SelectMenu(50, 40);
	textcolor(red);
	printf("%d", hp);
	SelectMenu(97, 40);
	textcolor(yellow);
	printf("%d", hop);
	drawing_tool(shieldicon, 11, 11, 6, 28, 6, 28);
	drawing_tool(swordicon, 11, 11, 46, 28, 46, 28);
	drawing_tool(fire, 11, 11, 86, 28, 86, 28);
	drawing_tool(salvation, 11, 11, 126, 28, 126, 28);
	textcolor(white);
	int x_2 = 21;//21 59 97 145
	int y_2 = 28;
	SelectMenu(x_2, y_2);
	printf("▼");
	int turn = 1;
	int skill_3th_turn = 0;
	int light_1 = 1;
	SelectMenu(72, 3);
	printf("%s", ms[boss_status].name);

	int boss_hp = ms[boss_status].hp;
	int boss_hp_max = ms[boss_status].hp_max;
	int boss_attack = ms[boss_status].attack;

	int uncount = 0;

	int a = 0;

	int sum;
	while (1)
	{
		if (boss_hp <= 0)
			boss_hp = 0;
		if (boss_hp == 0)
			break;
		if (hp <= 0)
			hp = 0;
		if (hp == 0)
			break;
		int light = 1;
		int light_2 = 1;
		int su = 4;
		SelectMenu(0, 23);
		printf("                                                                                                               ");
		SelectMenu(75, 4);
		printf("%d", boss_hp);

		for (int i = 0; i < 10; i++)
		{
			int x = 72;
			SelectMenu(x, su += 1);
			for (int j = 0; j < 10; j++)
			{
				printf("■");
			}
		}
		su = 4;
		if (boss_hp == 0)
		{
			for (int i = 0; i < 10; i++)
			{
				int x = 69;
				SelectMenu(72, su += 1);
				for (int j = 0; j < 10; j++)
				{
					printf(" ");
				}
			}
			SelectMenu(72, 3);
			printf("          ");
			SelectMenu(75, 4);
			printf("       ");
		}

		int x_3 = 75;
		int y_3 = 23;
		int count = 0;
		uncount = 0;
		int quest = 0;
		decrease_damage = 1;
		while (1)//우리턴
		{
			if (light == 0)
				break;
			textcolor(3);
			SelectMenu(1, 1);
			printf("%d턴", turn);
			if (skill_3th_turn != 0)
			{
				SelectMenu(96, 36);
				printf("%d턴", skill_3th_turn);
			}
			else if (skill_3th_turn == 0)
			{
				SelectMenu(96, 36);
				printf("     ");
			}
			int count_1 = 0;
			textcolor(15);
			do
			{
				if (light == 0)
					continue;
				int a = keyControl();
				switch (a)
				{
				case skill_1:
					SelectMenu(x_2, y_2);
					printf(" ");
					x_2 = 21;
					SelectMenu(x_2, y_2);
					printf("▼");
					int sum;
					SelectMenu(0, 39);
					printf("                                                                                                                                                                                         ");
					SelectMenu(0, 28);
					printf("                                                                                                                                                                                                 ");
					drawing_tool(shieldicon, 11, 12, 6, 27, 6, 27);
					drawing_tool(swordicon, 11, 11, 46, 28, 46, 28);
					drawing_tool(fire, 11, 11, 86, 28, 86, 28);
					drawing_tool(salvation, 11, 11, 126, 28, 126, 28);
					textcolor(white);
					break;
				case up:
					SelectMenu(x_2, y_2);
					printf(" ");
					x_2 = 59;
					SelectMenu(x_2, y_2);
					printf("▼");
					SelectMenu(0, 39);
					printf("                                                                                                                                                                                         ");
					SelectMenu(0, 28);
					printf("                                                                                                                                                                                                 ");
					drawing_tool(shieldicon, 11, 12, 6, 28, 6, 28);
					drawing_tool(swordicon, 11, 11, 46, 27, 46, 27);
					drawing_tool(fire, 11, 11, 86, 28, 86, 28);
					drawing_tool(salvation, 11, 11, 126, 28, 126, 28);
					break;
				case skill_3:
					SelectMenu(x_2, y_2);
					printf(" ");
					x_2 = 97;
					SelectMenu(x_2, y_2);
					printf("▼");
					SelectMenu(0, 39);
					printf("                                                                                                                                                                                         ");
					SelectMenu(0, 28);
					printf("                                                                                                                                                                                                 ");
					drawing_tool(shieldicon, 11, 12, 6, 28, 6, 28);
					drawing_tool(swordicon, 11, 11, 46, 28, 46, 28);
					drawing_tool(fire, 11, 11, 86, 27, 86, 27);
					drawing_tool(salvation, 11, 11, 126, 28, 126, 28);
					break;
				case skill_4:
					SelectMenu(x_2, y_2);
					printf(" ");
					x_2 = 135;
					SelectMenu(x_2, y_2);
					printf("▼");
					SelectMenu(0, 39);
					printf("                                                                                                                                                                                         ");
					SelectMenu(0, 28);
					printf("                                                                                                                                                                                                 ");
					drawing_tool(shieldicon, 11, 12, 6, 28, 6, 28);
					drawing_tool(swordicon, 11, 11, 46, 28, 46, 28);
					drawing_tool(fire, 11, 11, 86, 28, 86, 28);
					drawing_tool(salvation, 11, 11, 126, 27, 126, 27);
					break;
				case information:
					SelectMenu(x_2, y_2 + 1);
					if (x_2 == 21)
					{
						SelectMenu(x_2 - 9, y_2 - 2);
						printf("받는 피해를 50% 감소 시키고, 다음공격 크리티컬 확률이 100%로 증가합니다");
						Sleep(1500);
						SelectMenu(x_2 - 9, y_2 - 2);
						printf("                                                                    ");
						break;
					}
					if (x_2 == 59)
					{
						SelectMenu(x_2 - 15, y_2 - 2);
						printf("공격력의 100% 자신의 hp를 회복하고 단일적군에게 입힙니다/hop10 회복");
						Sleep(1500);
						SelectMenu(x_2 - 15, y_2 - 2);
						printf("                                                                            ");
						break;
					}
					if (x_2 == 97)
					{
						SelectMenu(x_2 - 15, y_2 - 2);
						printf("공격력의 80% 만큼의 피해를 적군전체에게 입힙니다/hop30 소모");
						Sleep(1500);
						SelectMenu(x_2 - 15, y_2 - 2);
						printf("                                                                      ");
						break;
					}
					if (x_2 == 135)
					{
						SelectMenu(x_2 - 100, y_2 - 2);
						printf("공격력의 1200%만큼 단일적군에게 피해를 주고 피해의 절반만큼 전체를 공격합니다/hop80 소모");
						SelectMenu(x_2 - 100, y_2 - 2);
						Sleep(2000);
						printf("                                                                                        ");
						break;
					}
				case select:
					while (light_2)
					{
						if (x_2 == 21)
							break;
						light_2 = 1;
						SelectMenu(x_3, y_3);//75 23
						printf("▲");
						a = keyControl();
						switch (a)
						{
						case left:
							if (x_3 > 45)
							{
								SelectMenu(x_3, y_3);
								printf(" ");
								SelectMenu(x_3 -= 50, y_3);// 25 75 125
								printf("▲");
								break;
							}
						case right:
							if (x_3 < 105)
							{
								SelectMenu(x_3, y_3);
								printf(" ");
								SelectMenu(x_3 += 50, y_3);
								printf("▲");
								break;
							}
						case select:
							if (x_3 - 75 == 0)
							{
								if (boss_hp == 0)
									break;
								count = 2;
								light_2 = 0;
								break;
							}
						}
					}
					sum = 0;
					SelectMenu(70, 26);
					if (x_2 == 21)
					{
						printf("성령의 방패 발동!");
						if (skill_3th_turn > 0)
							skill_3th_turn--;
						light = 0;
						decrease_damage = 2;
						critical = 100;
					}
					if (x_2 == 59)
					{
						printf("정화의 빛 발동!");
						if (hop != hop_max)
						{
							hop += 10;
							if (hop >= 100)
								hop = 100;
						}
						if (hp != hp_max)
						{
							hp += hp_max / 10;
							if (hp >= 100)
								hp = 100;
							SelectMenu(50, 40);
							textcolor(red);
							printf("%d", hp);
							int x = ((56 + (10 - (hp / 10))));
							for (int i = 0; i < (hp / 10); i++)
							{
								SelectMenu((x += 1), 40);
								printf("■");
							}
							textcolor(white);
						}
						if (count == 2)
						{
							sum = damage_system(0, attact, critical, critical_damage, 1);
							boss_hp -= sum;
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (boss_hp <= 0)
							{
								printf("0");
							}
							else
								printf("%d", boss_hp);
							hop += 10;
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop);
						}
						if (skill_3th_turn > 0)
							skill_3th_turn--;
						light = 0;
						critical = 15;
						SelectMenu(12, 20);
						textcolor(yellow);
						printf("TOTAL ");
						printf("%d", sum);
					}
					if (x_2 == 97)
					{
						if (skill_3th_turn > 0)
						{
							printf("%d턴 남았습니다", skill_3th_turn);
							Sleep(1000);
							printf("                   ");
							break;
						}
						if (hop <= 30)
						{
							textcolor(14);
							printf("hop");
							textcolor(15);
							printf("가 부족합니다");
							Sleep(1000);
							printf("                  ");
							break;
						}
						printf("구마의 손길 발동!");
						hop -= 30;
						if (count == 1 || count == 2 || count == 3)
						{
							sum = damage_system(0, attact - (attact / 5), critical, critical_damage, 1);
							boss_hp -= sum;
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (boss_hp <= 0)
							{
								printf("0");
							}
							else
								printf("%d", boss_hp);
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop);
						}
						skill_3th_turn = 4;
						light = 0;
						critical = 15;
						SelectMenu(12, 20);
						textcolor(yellow);
						printf("TOTAL ");
						printf("%d", sum);
					}
					int sum_2 = 0;
					if (x_2 == 135)
					{
						if (hop <= 80)
						{
							textcolor(14);
							printf("hop");
							textcolor(15);
							printf("가 부족합니다");
							break;
						}
						printf("구원의 빛 발동!");
						hop -= 80;
						if (count == 2)
						{
							sum = damage_system(0, attact * 12, critical, critical_damage, 1);
							sum_2 = sum / 2;
							boss_hp -= sum;
							SelectMenu(75, 4);
							printf("           ");
							SelectMenu(75, 4);
							if (boss_hp <= 0)
							{
								printf("0");
							}
							else
								printf("%d", boss_hp);
							SelectMenu(97, 40);
							printf("     ");
							SelectMenu(97, 40);
							printf("%d", hop);
							SelectMenu(75, 4);
							printf("       ");
						}
					}
					light = 0;
					Sleep(1000);
					SelectMenu(70, 26);
					printf("                 ");

					break;
				}
			} while (light);
		}
		Sleep(2000);
		textcolor(white);
		SelectMenu(12, 20);
		printf("           ");
		SelectMenu(12, 19);
		printf("             ");
		while (1)//적턴
		{
			if (boss_hp <= 0)
				boss_hp = 0;

			if (boss_hp == 0)
				break;
			if (hp <= 0)
				hp = 0;
			if (hp == 0)
				break;
			int sum;
			int skill_1th_turn = 0;
			int skill_2th_turn = 4;
			if (skill_2th_turn == 4)
			{
				sum = damage_system(defense, boss_attack + (boss_attack / 5), 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(12, 19);
				printf("악마의 무자비");
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn = 0;
			}
			else
			{
				sum = damage_system(defense, boss_attack, 0, 0, decrease_damage);
				hp -= sum;
				int x = 56;
				SelectMenu(12, 19);
				printf("평타");
				SelectMenu(50, 40);
				printf("      ");
				SelectMenu(50 + 1, 40);
				textcolor(red);
				printf("%d", hp);
				SelectMenu(56, 40);
				printf("             ");
				for (int i = 0; i < hp / (hp_max / 10); i++)
				{
					SelectMenu((x += 1), 40);
					printf("■");
				}
				textcolor(white);
				skill_2th_turn += 1;
			}
			SelectMenu(12, 20);
			textcolor(red);
			printf("TOTAL ");
			printf("%d", sum);
			turn++;
			Sleep(2000);
			SelectMenu(12, 20);
			printf("                 ");
			textcolor(white);
			break;
		}
	}
}
